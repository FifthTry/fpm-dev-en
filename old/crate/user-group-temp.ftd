-- import: ds as ft

-- ft.page: `fastn::UserGroupTemp`

`fastn::UserGroupTemp` is used for deserializing [fastn.user-group](/dev/user-group),

means used for converting `ftd-code` to `rust-struct`.


-- ft.code:
lang: rs


pub struct UserGroupTemp {
    // if package name is abrark.com and it has user-group with id my-all-readers
    // so group string will be abrark.com/my-all-readers
    // keys should be dynamic
    pub id: String,
    pub title: Option<String>,
    pub description: Option<String>,
    #[serde(rename = "group")]
    pub groups: Vec<String>,
    #[serde(rename = "-group")]
    pub excluded_group: Vec<String>,
    #[serde(rename = "email")]
    pub email: Vec<String>,
    #[serde(rename = "-email")]
    pub excluded_email: Vec<String>,
    #[serde(rename = "domain")]
    pub domain: Vec<String>,
    #[serde(rename = "-domain")]
    pub excluded_domain: Vec<String>,
    #[serde(rename = "telegram")]
    pub telegram: Vec<String>,
    #[serde(rename = "-telegram")]
    pub excluded_telegram: Vec<String>,
    #[serde(rename = "github")]
    pub github: Vec<String>,
    #[serde(rename = "-github")]
    pub excluded_github: Vec<String>,
    #[serde(rename = "github-team")]
    pub github_team: Vec<String>,
    #[serde(rename = "-github-team")]
    pub excluded_github_team: Vec<String>,
    #[serde(rename = "discord")]
    pub discord: Vec<String>,
    #[serde(rename = "-discord")]
    pub excluded_discord: Vec<String>,
}


impl UserGroupTemp {
    pub fn are_unique(groups: &[UserGroupTemp]) -> Result<bool, String>

    pub fn user_groups(
        user_groups: Vec<UserGroupTemp>,
    ) -> fastn::Result<std::collections::BTreeMap<String, UserGroup>>

    pub fn to_user_group(self) -> fastn::Result<UserGroup>
}

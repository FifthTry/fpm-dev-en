-- ft.page: `fpm::utils`

`fpm::utils` is a bunch of private helper functions.

-- ft.h1: `fpm::utils::replace_markers()`

When generating HTML files, we use a template. The templates contain special
markers eg `__ftd_doc_title__`. `fpm::utils::replace_markers()` replaces all
those markers with the dynamically generated values.

-- ft.code:
lang: rs

pub(crate) fn replace_markers(
    s: &str,
    config: &fpm::Config,
    main_id: &str,
    title: &str,
    base_url: &str,
    main_rt: &ftd::Document,
) -> String


-- ft.h2: `__ftd_doc_title__`

This is title of the document. We get this parameter as an argument to the
`replace_markers()` function.

-- ft.h2: `__ftd_canonical_url__`

This is the [canonical url](https://support.google.com/webmasters/answer/10347851?hl=en)
for the page.

This is generated by `fpm::Package::generate_canonical_url()`.

-- ft.h2: `__ftd_js__`

The `ftd.js` file content from `ftd` crate is included in the generated HTML
file. We get this from `ftd::js()`.

In fact we have written a wrapper, `fpm::ftd_js()` which returns a constant
string "FTD_JS" when we are running this function under test. We do this so that
our html snapshot files do not contain the entire js, to reduce the content
size in git, and also to ensure tests do not fail when we update `ftd` and
`ftd::js()` changes.

-- ft.h2: `__ftd_body_events__`

This contains the content of events on body. We find this from
`ftd::Document.body_events`.

Note: We will soon refactor and remove this key, and will just use
`__ftd_data_main__`.


-- ft.h2:`__ftd_css__`

Same as `__ftd_js__`, but for `ftd::css()`. We use `fpm::ftd_css()` wrapper here
too.

-- ft.h2: `__fpm_js__`

We have a `fpm.js` file in our repo that we want to include in all generated
HTML as well. We only include the actual file content when not running in test
mode. In test mode we include "FPM_JS" string.

-- ft.h2: `__ftd_data_main__`

The `ftd` variables, dependencies etc are serialised into JSON and stored here.

-- ft.h2: `__ftd_external_children_main__`

We store information about "external children" here.

Note: We will soon refactor and remove this key, and will just use
`__ftd_data_main__`.

-- ft.h2: `__main__`

The rendered HTML is used here.

-- ft.h2: `__base_url__`

This is the base URL.


-- ft.h1: `parse_from_cli`

This function is for parse an argument for command line.

-- ft.code:
lang: rs

fn parse_from_cli(key: &str) -> Option<String>

-- ft.markdown:

E.g.:

Let's say if cli command is `fpm serve --identities a@foo.com,foo`, if
you passed `--identities` to this function so it will return
`Some("a@foo.com,foo")`.

-- ft.h1: `remove`

This function is to remove file, symlink or directory from given path.

-- ft.code:
lang: rs

async fn remove(path: &camino::Utf8Path) -> std::io::Result<()>

-- ft.markdown:

E.g.:

`remove("foo/abc.ftd")` will remove the file.

`remove("foo/")` will remove the whole directory, first it will remove it's
content and then delete the directory.



-- ft.h1: `remove_except`

This function is to remove file from `root` except provided files.

-- ft.code:
lang: rs

async fn remove_except(root: &camino::Utf8Path, except: &[&str]) -> fpm::Result<()>

-- ft.markdown:

E.g.:

`remove_except("/Users/wilderbit/github/abrark", ["abc.ftd"])`, It will remove
everything from `abrark` directory except `abc.ftd`.


-- ft.h1: `query`

This function accept `uri` and returns the parsed query parameter.

-- ft.code:
lang: rs

fn query(uri: &str) -> fpm::Result<Vec<(String, String)>>

-- ft.markdown:

E.g.:

-- ft.code:
lang: rs

fn query() {
    assert_eq!(
        super::query("/api/?a=1&b=2&c=3&a=4").unwrap(),
        vec![
            ("a".to_string(), "1".to_string()),
            ("b".to_string(), "2".to_string()),
            ("c".to_string(), "3".to_string()),
            ("a".to_string(), "4".to_string())
        ]
    )
}


-- ft.page: `fpm::UserGroup`

`fpm::UserGroup` keeps information about [user-group](/dev/user-group/), which
are the part of `FPM.ftd` file.


For More check: [user-group](/dev/user-group/)

Code File: [`fpm::src::user_groups.rs`](https://github.com/FifthTry/fpm/blob/main/src/user_group.rs)

-- ft.code:
lang: rs

pub struct UserGroup {
    pub title: Option<String>,
    pub id: String,
    pub identities: Vec<(String, String)>,
    pub excluded_identities: Vec<(String, String)>,
    pub groups: Vec<String>,
    pub excluded_groups: Vec<String>,
    pub description: Option<String>,
}

impl UserGroup {
    // This function converts UserGroup object to UserGroupCompat
    pub fn to_group_compat(&self) -> UserGroupCompat

    // Return group identities, convert imported groups into identities
    // A group can also be part of similar package or a different package
    pub fn identities(&self) -> Vec<(String, String)> {
        // A group have
        // identities, exclude identities
        // groups and excluded groups
        // Identities of a group are
        // group.identities + (For all group.groups(g.group - g.excluded_group)).identities - group.excluded_identities
        vec![]
    }
    // TODO:
    // This function will check whether given identities are part or given groups or not,
    // It will return true if all are part of provided groups
    // pub fn belongs_to(_identities: &[&str], _groups: &[UserGroup]) -> fpm::Result<bool> {
    //     Ok(false)
    // }
}

-- ft.h1: `UserGroup` Properties

For all properties check [this](/dev/user-group/#group-properties)

-- ft.h2: `identities`

This `Vec` contains all the identities other than which do not contain `-`
and `group` keys.

-- ft.h2: `excluded_identities`

This `Vec` contains all the identities which contain `-` in them other than
`-group` keys.

-- ft.h2: `groups`

This `Vec` contains all the `group` keys. Which are the another groups.

-- ft.h2: `excluded_groups`

This `Vec` contains all the `-group` keys. Which are the another groups.

-- ft.h1: `UserGroup` Functions

-- ft.h2: `to_group_compat`

This function converts UserGroup to [UserGroupCompat](/crate/user-group-compat/)
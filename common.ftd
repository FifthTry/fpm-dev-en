-- import: ftd.dev/assets
-- import: fpm

-- ft.page-with-toc: Common Attributes
toc: $config.ui-toc
sub-sections: $config.doc-header


-- ftd.column:
id: outer


-- ft.markdown: 

These attributes are available to all `ftd` "kernel" components.


-- ft.h1: `color:` [`ftd.color`](/built-in-types/#ftd-color)

-- ft.markdown:

The color property sets the color of an element. It takes
input of [`ftd.color`](/built-in-types/#ftd-color) type.


-- ft.code: specifying color
lang: ftd

\-- ftd.color red:
light: red
dark: red

\-- ftd.text: FifthTry
color: $red


-- ft.markdown:

This will render like this:

-- ftd.color red:
light: red
dark: red

-- ftd.text: FifthTry
color: $red


-- ft.h1: `background-color:` [`ftd.color`](/built-in-types/#ftd-color)

The background-color property sets the background color of an element. It takes
input of [`ftd.color`](/built-in-types/#ftd-color) type.


-- ft.code: specifying background-color
lang: ftd

\-- ftd.text: FifthTry
background-color: $red


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
color: $fpm.color.main.text-strong
background-color: $red



-- ft.h1: `border-width: Integer`

Use this property to specify the width of the border. By default the `border-width`
is zero, and is not visible.


-- ft.code: specifying border width
lang: ftd

\-- ftd.text: FifthTry
border-width: 2


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
border-width: 2
color: $fpm.color.main.text



-- ft.h1: `border-top: Integer`

The border-top property sets the width of an element's top border.


-- ft.code: specifying border width
lang: ftd

\-- ftd.text: FifthTry
border-top: 2


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
border-top: 2
color: $fpm.color.main.text




-- ft.h1: `border-bottom: Integer`

The border-bottom property sets the width of an element's bottom border.


-- ft.code: specifying border width
lang: ftd

\-- ftd.text: FifthTry
border-bottom: 2


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
border-bottom: 2
color: $fpm.color.main.text



-- ft.h1: `border-left: Integer`

The border-left property sets the width of an element's left border.


-- ft.code: specifying border width
lang: ftd

\-- ftd.text: FifthTry
border-left: 2


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
border-left: 2
color: $fpm.color.main.text



-- ft.h1: `border-right: Integer`

The border-right property sets the width of an element's right border.


-- ft.code: specifying border width
lang: ftd

\-- ftd.text: FifthTry
border-right: 2


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
border-right: 2
color: $fpm.color.main.text



-- ft.h1: `border-style: String`

The border-style property sets the style of an element's borders.


-- ft.code: specifying border width
lang: ftd

\-- ftd.text: FifthTry
border-style: dashed
border-width: 2


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
border-style: dashed
border-width: 2
color: $fpm.color.main.text



-- ft.h1: `border-color:` [`ftd.color`](/built-in-types/#ftd-color)

The border-color property sets the color of an element's four borders. It takes
input of [`ftd.color`](/built-in-types/#ftd-color) type.


-- ft.code:
lang: ftd

\-- ftd.color red:
light: red
dark: red

\-- ftd.text: FifthTry
border-width: 2
border-color: $red


-- ft.markdown:

This will render like this:

-- ftd.text: FifthTry
border-width: 2
color: $fpm.color.main.text
border-color: $red


-- ft.h1: `border-radius: Integer`

The border-radius property defines the radius of the element's corners.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
border-width: 2
border-radius: 50


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
border-width: 2
color: $fpm.color.main.text
border-radius: 50


-- ft.h1: `border-top-radius: Integer`

The border-top-radius property defines the radius of the top corner.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
border-width: 2
border-top-radius: 50


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
border-width: 2
color: $fpm.color.main.text
border-top-radius: 50



-- ft.h1: `border-bottom-radius: Integer`

The border-bottom-radius property defines the radius of the bottom corner.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
border-width: 2
border-bottom-radius: 50


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
border-width: 2
color: $fpm.color.main.text
border-bottom-radius: 50


-- ft.h1: `border-left-radius: Integer`

The border-left-radius property defines the radius of the left corner.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
border-width: 2
border-left-radius: 50


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
border-width: 2
color: $fpm.color.main.text
border-left-radius: 50



-- ft.h1: `border-right-radius: Integer`

The border-right-radius property defines the radius of the right corner.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
border-width: 2
border-right-radius: 50


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
border-width: 2
color: $fpm.color.main.text
border-right-radius: 50




-- ft.h1: `padding: Integer`

Padding is used to create space around an element's content, inside of any defined borders.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
padding: 60
border-width: 2


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
padding: 60
color: $fpm.color.main.text
border-width: 2



-- ft.h1: `padding-vertical: Integer`

This gives top and bottom padding.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
padding-vertical: 60


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
padding-vertical: 60
color: $fpm.color.main.text
border-width: 2



-- ft.h1: `padding-horizontal: Integer`

This gives left and right padding.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
padding-horizontal: 60


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
padding-horizontal: 60
color: $fpm.color.main.text
border-width: 2


-- ft.h1: `padding-left: Integer`

This gives left padding.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
padding-left: 60


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
padding-left: 60
color: $fpm.color.main.text
border-width: 2



-- ft.h1: `padding-right: Integer`

This gives right padding.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
padding-right: 60


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
padding-right: 60
color: $fpm.color.main.text
border-width: 2



-- ft.h1: `padding-top: Integer`

This gives top padding.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
padding-top: 60


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
padding-top: 60
color: $fpm.color.main.text
border-width: 2


-- ft.h1: `padding-bottom: Integer`

This gives bottom padding.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
padding-bottom: 60


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
padding-bottom: 60
color: $fpm.color.main.text
border-width: 2


-- ft.h1: `width: String`

The width property sets the width of an element.

The width of an element does not include padding, borders, or margins.
It takes the [length values](/built-in-types/#length-string)


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
width: 200


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
width: 200
color: $fpm.color.main.text
border-width: 2


-- ft.h1: `min-width: String`

The min-width property defines the minimum width of an element.
It takes the [length values](/built-in-types/#length-string)

If the content is smaller than the minimum width, the minimum width will be applied.

If the content is larger than the minimum width, the min-width property has no effect.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
min-width: 200


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
min-width: 200
color: $fpm.color.main.text
border-width: 2


-- ft.h1: `max-width: String`

The max-width property defines the maximum width of an element.
It takes the [length values](/built-in-types/#length-string)

If the content is larger than the maximum width, it will automatically change the height of the element.

If the content is smaller than the maximum width, the max-width property has no effect.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
max-width: 40


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
max-width: 40
color: $fpm.color.main.text
border-width: 2


-- ft.h1: `height: String`

The height property sets the height of an element.

The height of an element does not include padding, borders, or margins.
It takes the [length values](/built-in-types/#length-string)


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
height: 60


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
height: 60
color: $fpm.color.main.text
border-width: 2


-- ft.h1: `min-height: String`

The min-height property defines the minimum height of an element.
It takes the [length values](/built-in-types/#length-string)

If the content is smaller than the minimum height, the minimum height will be applied.

If the content is larger than the minimum height, the min-width property has no effect.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
min-height: 70


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
min-height: 70
color: $fpm.color.main.text
border-width: 2


-- ft.h1: `max-height: String`

The max-height property defines the maximum height of an element.
It takes the [length values](/built-in-types/#length-string)

If the content is larger than the maximum height, it will automatically change the height of the element.

If the content is smaller than the maximum height, the max-height property has no effect.


-- ft.code:
lang: ftd

\-- ftd.text: FifthTry
max-height: 10


-- ft.markdown:

This will render like this:


-- ftd.text: FifthTry
max-height: 10
color: $fpm.color.main.text
border-width: 2



-- ft.h1: `overflow-x: String`

The overflow-x property specifies whether to clip the content, add a scroll bar,
or display overflow content of a block-level element, when it overflows at the
left and right edges. It takes the following values:

- hidden
- visible
- auto
- scroll


-- ft.code:
lang: ftd

\-- ftd.text:
background-color: $red
width: 150
height: 100
overflow-x: scroll

Lorem ipsum dolor sit amet, and a veryveryveryveryveryverylong
word consectetuer adipiscing elit, sed diam nonummy nibh euismod
tincidunt ut laoreet dolore magna aliquam erat


-- ft.markdown:

This will render like this:


-- ftd.text:
color: $fpm.color.main.text-strong
background-color: $red
width: 150
height: 100
overflow-x: scroll

Lorem ipsum dolor sit amet, and a veryveryveryveryveryverylong
word consectetuer adipiscing elit, sed diam nonummy nibh euismod
tincidunt ut laoreet dolore magna aliquam erat


-- ft.h1: `overflow-y: String`

The overflow-y property specifies whether to clip the content,
add a scroll bar, or display overflow content of a block-level element,
when it overflows at the top and bottom edges. It takes the following values:

- hidden
- visible
- auto
- scroll


-- ft.code:
lang: ftd

\-- ftd.text:
background-color: $red
width: 150
height: 100
overflow-y: scroll

Lorem ipsum dolor sit amet, and a veryveryveryveryveryverylong
word consectetuer adipiscing elit, sed diam nonummy nibh euismod
tincidunt ut laoreet dolore magna aliquam erat


-- ft.markdown:

This will render like this:


-- ftd.text:
color: $fpm.color.main.text-strong
background-color: $red
width: 150
height: 100
overflow-y: scroll

Lorem ipsum dolor sit amet, and a veryveryveryveryveryverylong
word consectetuer adipiscing elit, sed diam nonummy nibh euismod
tincidunt ut laoreet dolore magna aliquam erat


-- ft.h1: `cursor: String`

You can set the cursor to be shown over any element by using `cursor` attribute:


-- ftd.row:
width: fill
border-width: 5
border-color: $fpm.color.main.text
padding: 10
cursor: pointer


-- ftd.text: this row has pointer as cursor
align: center
width: fill
color: $fpm.color.main.text


-- container: outer


-- ft.code:
lang: ftd

\-- ftd.row:
width: fill
border-width: 5
border-color: $fpm.color.main.text
padding: 10
cursor: pointer


\-- ftd.text: this row has pointer as cursor
align: center
width: fill


-- ft.markdown:

We support the same format as [CSS cursor](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor).


-- ft.h1: `link: String`

This converts the element to a hyper link.


-- ft.code:
lang: ftd

\-- ftd.text: google
link: https://www.google.com


-- ft.markdown:

This will render like this:


-- ftd.text: google
link: https://www.google.com


-- ft.h1: `open-in-new-tab: bool, default=False`

If `link` is provided, this attribute can also be set to open the link in new
tab instead of current tab.


-- ft.code:
lang: ftd

\-- ftd.text: google
link: https://www.google.com
open-in-new-tab: true


-- ft.markdown:

Which will render like this:


-- ftd.text: google (opens in new tab)
link: https://www.google.com
open-in-new-tab: true


-- ft.h1: `submit: Option<String>`

If `submit` is passed, clicking on it issues a POST request on the provided URL.


-- ft.code:
lang: ftd

\-- ftd.text: test post
submit: https://httpbin.org/post?x=10


-- ft.markdown:

Renders as:


-- ftd.text: test post
submit: https://httpbin.org/post?x=10


-- ft.markdown:

Note: Be careful about CSRF when using this feature. If the URL is dynamically 
generated, include some CSRF token for example.

Note: both `link` and `submit` can not be provided.


-- ft.h1: `region`

This is the [ARIA Region](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques#landmark_roles)
role that UI element is playing. Valid values are:


-- ft.h2: `h0`, `h1`, till `h7`


-- ft.code:
lang: ftd

\-- ftd.text: hello
region: h1


-- ft.markdown:

This tells this is a heading with the given level.


-- ft.h1: `background-gradient`

To add gradient please use the below gradient properties.


-- ft.h2: `gradient-direction:  Direction`

Below are the supported Direction type

- bottom to top
- top to bottom
- left to right
- right to left
- bottom-right to top-left
- bottom-left to top-right
- top-right to bottom-left
- top-left to bottom-right
- center
- angle Integer


-- ft.h2: `gradient-colors: List Color`


-- ft.h3: Code sample.


-- ft.code: Left to right gradient
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: left to right
gradient-colors: red , blue


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: left to right
gradient-colors: red , blue


-- container: outer


-- ft.markdown:

You can also make a gradient diagonally. 
Following example shows a gradient that starts at bottom left and goes to 
top right.


-- ft.code: Diagonal Gradient
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: bottom-left to top-right
gradient-colors: yellow, organge


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: bottom-left to top-right
gradient-colors: yellow, orange


-- container: outer


-- ft.markdown:

Gradient with multiple colors


-- ft.code: Multiple colors.
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: left to right
gradient-colors: red, green, blue, yellow, black


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: left to right
gradient-colors: red, green, blue, yellow, black


-- container: outer


-- ft.markdown:

Radial gradient that starts from the centre.


-- ft.code: Radial gradient
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: center
gradient-colors: red, green


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: center
gradient-colors: red, green


-- container: outer


-- ft.markdown:

For more control you can use angle instead of the pre-defined directions.
A value of 0deg is equivalent to "bottom to top". A value of 90deg is equivalent 
to "left to right". A value of 180deg is equivalent to "top to bottom".


-- ft.code: With Angle
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: angle 90
gradient-colors: red, green


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: angle 90
gradient-colors: red, green


-- container: outer


-- ft.markdown:

More examples with angle


-- ft.code: With 45deg Angle
lang: ftd

\-- ftd.row:
width: 400
height: 200
gradient-direction: angle 45
gradient-colors: red, green


-- ft.output:


-- ftd.row:
width: 400
height: 200
gradient-direction: angle 45
gradient-colors: red, green


-- container: outer


-- ft.h1: `background-image: String`

`background-image` accepts a url as the value. Use this property to make an image 
as background of a container.


-- ft.code: Container with background image
lang: ftd

\-- ftd.row:
width: fill
height: 300
background-image: https://imgur.com/oCHWQQF.jpg

\-- ftd.text: Sample Text
role: $fpm.type.title-large
align: center
color: $fpm.color.main.text


-- ft.output:


-- ftd.row:
width: fill
height: 300
background-image: $assets.files.images.oCHWQQF.jpg


-- ftd.text: Sample Text
role: $fpm.type.title-large
align: center
color: $fpm.color.main.text
width: fill
height: fill


-- container: outer


-- ft.h1: `background-repeat: boolean`

If you are using background-image property, you can also background-repeat
property to true to repeat the image until the container is filled.

This property is usually helpful when you have a small image of a pattern you
want to fill the container with that pattern.


-- ft.code: background image with background-repeat
lang: ftd

\-- ftd.row:
width: fill
height: 300
background-image: https://imgur.com/LnJ4ziC.png
background-repeat: true


\-- ftd.text: Sample Text
role: $fpm.type.title-large
align: center
color: $fpm.color.main.text
width: fill
height: fill


-- ft.output:


-- ftd.row:
width: fill
height: 300
background-image: $assets.files.images.LnJ4ziC.png
background-repeat: true


-- ftd.text: Sample Text
role: $fpm.type.title-large
align: center
color: $fpm.color.main.text
width: fill
height: fill


-- container: outer


-- ft.h1: `background-parallax: boolean`

To achieve parallax effect on your container. Make `background-parallax` property
to true.


-- ft.code: Container with parallax effect
lang: ftd

\-- ftd.row:
width: fill
height: 300
background-image: https://imgur.com/oCHWQQF.jpg
background-parallax: true

\-- ftd.text: Sample Text
role: $fpm.type.title-large
align: center
color: $fpm.color.main.text


-- ft.output:


-- ftd.row:
width: fill
height: 300
background-image: $assets.files.images.oCHWQQF.jpg
background-parallax: true


-- ftd.text: Sample Text
role: $fpm.type.title-large
align: center
color: $fpm.color.main.text
width: fill
height: fill

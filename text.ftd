-- boolean $show-theme-demos: false


-- ds.page: `ftd.text`: Text Block Kernel Element


-- ds.markdown: 

`ftd.text` can be used to renders text.


-- ds.code:
lang: ftd

\-- ftd.text: hello world


-- ds.tip: Common Attributes

Text accepts the below attributes as well all the [common attributes](common/).

-- ds.h1: `text: String`

You can pass any string value.

You have two ways to pass text value to the `ftd.text` component.

As `caption` which is a single line text.

-- ds.code:
lang: ftd

\-- ftd.text: FTD example


-- ds.markdown:

This will be render like this:


-- ftd.text: FTD example
;;color if $ftd.dark-mode: $inherited.colors.text
color: $inherited.colors.text-strong


-- ds.code:
lang: ftd

\-- ftd.text:
text: This is an example of how to use ftd.text.


-- ds.markdown:

This will be render like this:


-- ftd.text:
text: This is an example of how to use ftd.text.
;;color if $ftd.dark-mode: $inherited.colors.text
color: $inherited.colors.text-strong


-- ds.markdown:

Multi-line text can be added to the body the `ftd.text`:


-- ds.code:
lang: ftd

\-- ftd.text:

This is a bigger text.

This can span multiple lines.


-- ds.h1: `text-align `

This property is used to aligns text blocks:

-- ftd.column:

-- ftd.row:
spacing.fixed.px: 10


-- ftd.text:
text-align: center
border-width.px: 1
border-radius.px: 3
padding.px: 5
color: $inherited.colors.text-strong

this is **text-align: center** text. a bit longer text so you can see what's going on.


-- ftd.text:
align-self: start
border-width.px: 1
border-radius.px: 3
padding.px: 5
color: $inherited.colors.text-strong

this is **text-align: left** text. typing dummy text for examples is so boring.


-- ftd.text:
;;text-align: right
border-width.px: 1
border-radius.px: 3
padding.px: 5
color: $inherited.colors.text-strong

this is **text-align: right** aligned text. but then you got to do what you go to do.


-- ftd.text:
text-align: justify
border-width.px: 1
border-radius.px: 3
padding.px: 5
color: $inherited.colors.text-strong

this is **text-align: justify** text. or not. whatever works. I mean maybe it matters.



-- ds.code:
lang: ftd

\-- ftd.text: this is some center aligned text
align: center


-- ds.h1: `format`

`ftd.text` uses `format` attribute to decide how to format the text. It can be
`markdown`, `latex` or `code`.


-- ds.h2: `format: markdown`

`markdown` is the default `format`. It is used to format text as markdown.


-- ds.code:
lang: ftd

\-- ftd.text:
format: markdown

This is **markdown** formatted text.


-- ds.markdown:

Which renders like this:


-- ftd.text:
color: $inherited.colors.text-strong

This is **markdown** formatted text.


-- ds.markdown:

Note: we do not support `![]()` (image) in markdown, nor we support html tags.


-- ds.h2: `format: code`

`ftd.text` supports source code syntax highlighting.


-- ds.code:
lang: ftd

\-- ftd.text:
format: code
lang: py
width: fill-container

import os


-- ds.markdown:

Which renders as:


\-- ftd.text:
format: code
lang: py
width: fill-container

import os

print("hello world")


-- ds.markdown:

When using `format: code`, `lang` attribute should be also specified. This
attribute decides what "language" the source code is in. Further `theme` can also
be specified to control the theme used for syntax highlighting.


-- ds.h1: `lang`

When the value of `format` is `code`, `lang` can be specified to chose the
"language" used for syntax highlighting.

The value of `lang` must be the file extension used by source of that code, eg for
python it must be `py` and so on.

The default value of `lang` is `txt`.


-- ds.h1: `theme`

When the value of `format` is `code`, `theme` can be specified to chose the
"theme" used for syntax highlighting.

The supported values of themes are:

- InspiredGitHub
- Solarized (dark)
- Solarized (light)
- base16-eighties.dark
- base16-mocha.dark
- **base16-ocean.dark** (default)
- base16-ocean.light


-- ds.h2: Theme Demos


-- ftd.text: View Themes
if: { !show-theme-demos }
;; color if $ftd.dark-mode: $inherited.colors.text -- TODO FTD 0.3
color: $inherited.colors.text-strong
$on-click$: $ftd.set-bool($a = $show-theme-demos, v = false) 


-- ftd.text: Hide Themes
if: { show-theme-demos }
;; color if $ftd.dark-mode: $inherited.colors.text -- TODO FTD 0.3
color: $inherited.colors.text-strong
$on-click$: $ftd.set-bool($a = $show-theme-demos, v = true) 


-- ftd.column:
if: { show-theme-demos }


-- ds.h3: `theme: InspiredGitHub`


-- ftd.code:
lang: py
width: fill-container
theme: InspiredGitHub

import os

print("hello world")


-- ds.h3: `theme: Solarized (dark)`


-- ftd.code:
lang: py
width: fill-container
theme: Solarized (dark)

import os

print("hello world")


-- ftd.text: Hide Themes
if: { show-theme-demos }
;; color if $ftd.dark-mode: $inherited.colors.text -- TODO FTD 0.3
color: $inherited.colors.text-strong
$on-click$: $ftd.set-bool($a = $show-theme-demos, v = true) 


-- ds.h3: `theme: Solarized (light)`


-- ftd.code:
lang: py
width: fill-container
theme: Solarized (light)

\-- ftd.text:
format: code
lang: py
width: fill-container
theme: Solarized (light)

import os

print("hello world")


-- ds.h3: `theme: base16-eighties.dark`


-- ftd.code:
lang: py
width: fill-container
theme: base16-eighties.dark

\-- ftd.text:
format: code
lang: py
width: fill-container
theme: base16-eighties.dark

import os

print("hello world")


-- ftd.text: Hide Themes
if: { $show-theme-demos }
;; color if $ftd.dark-mode: $inherited.colors.text -- TODO FTD 0.2
color: $inherited.colors.text-strong
$on-click$: $ftd.set-bool($a = $show-theme-demos, v = true) 


-- ds.h3: `theme: base16-mocha.dark`

-- ftd.code:
lang: py
width: fill-container
theme: base16-mocha.dark

\-- ftd.text:
format: code
lang: py
width: fill-container
theme: base16-mocha.dark

import os

print("hello world")


-- ds.h3: `theme: base16-ocean.dark`

-- ftd.code:
lang: py
width: fill-container
theme: base16-ocean.dark

\-- ftd.text:
format: code
lang: py
width: fill-container
theme: base16-ocean.dark

import os

print("hello world")


-- ds.h3: `theme: base16-ocean.light`

-- ftd.code:
lang: py
width: fill-container
theme: base16-ocean.light

\-- ftd.text:
format: code
lang: py
width: fill-container
theme: base16-ocean.light

import os

print("hello world")


-- ftd.text: Hide Themes
if: { $show-theme-demos }
;; color if $ftd.dark-mode: $inherited.colors.text
color: $inherited.colors.text-strong
$on-click$: $ftd.set-bool($a = $show-theme-demos, v = true) 

-- end: ds.page
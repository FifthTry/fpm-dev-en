-- import: fastn/processors as pr
-- import: fastn.com/expander/lib

-- my-ds.page: Creating a page

-- ds.markdown:
if: { !show-planning }

In this video we will learn how to create a page.

/-- ds.youtube:
if: { !show-planning }
v: 

-- lib.video-audience: How to create a page
if: { show-planning }
owner: Ajit
aud: Website Builders

To explain what all can be done using page component.

-- ds.h1: Intro Slide
if: { show-planning }

Welcome!! My name is Ajit

In this video we learn everything we can do using page component of the 
`doc-site` package.

-- ds.image:
if: { show-planning }
src: $fastn-assets.files.expander.ds.img.page-intro.png

-- ds.h1: Introduction
if: { show-planning }

With the `page` component, you can effortlessly construct web pages by 
seamlessly integrating various components within this single container.

The component `page` has various benefits:

From harmonizing color schemes to selecting compelling typography, you can
effortlessly infuse your website with a unified and professional look.

`Page` has properties that easily add meta-data and hence unlock the 
potential of SEO optimization and boost your website's visibility and ranking. 
There is a separate video dedicated to the same, you can find the link in 
the description.


-- ds.h1: Introduction
if: { !show-planning }

With `page` component, you can effortlessly construct captivating web pages by 
seamlessly integrating various components within a single container. 

-- ds.code: Page component
lang: ftd

\-- ds.page:

\;; content goes here

\-- end: ds.page

-- ds.markdown:
if: { !show-planning }

From harmonizing color schemes to selecting compelling typography, you can
effortlessly infuse your website with a unified and professional look.

`Page` has properties that easily add meta-data and hence unlocks the 
potential of SEO optimization and boost your website's visibility and ranking. 

To know about this, checkout 
[How to add meta-data for website optimization](/seo-meta/).


-- ds.markdown:

To create a standalone page or a complete website, you need to add the 
doc-site package to your fastn project.

To add the `doc-site` package to your project:

**A:** Add it as a dependency in `FASTN.ftd` document.

-- ds.code: Add as dependency
lang: ftd

\-- fastn.dependency: fastn-community.github.io/doc-site

-- ds.markdown:

**B:**  Then, import the `doc-site` package in your documents like `index.ftd`

-- ds.code: Importing doc-site
lang: ftd

\-- import: fastn-community.github.io/doc-site as ds

-- ds.h1: Creating a standalone page
$on-global-key[alt-p]$: $ftd.toggle($a = $show-planning)

Now use the component `ds.page` and apply the properties you need, to create 
a page.  

-- ds.code: Page
lang: ftd

\-- ds.page: You meet me first because I am ~in~ en'titled ü§¥
site-name: Ajit
site-logo: $assets.files.images.logo.svg
logo-width: 50
site-url: https://fastn.com/


Hello, I am the first paragraph in the body area üñê. 

And I am the second paragraph üôÜ‚Äç‚ôÇÔ∏è in the body area of the page component. 

At vero eos et accusamus et iusto odio 
dignissimos ducimus qui blanditiis molestias excepturi sint occaecati 
cupiditate non provident.


\-- ds.h1: I'm the tallest in my family ü¶ï

This is heading level 1 optional body content.

\-- ds.h2: Damn! I just missed by few pixels üê™

This is heading level 2 optional body content.

\-- ds.h3: I get bullied by the above two üôÑ

This is heading level 3 optional body content.

\-- ds.markdown:

I don't brag about myself but I am the convient one üòé.


\-- end: ds.page


-- ds.h1: Customized Page Component

Now imagine, you have a dozen of such documents in your package. 

On top of it, imagine displaying your distinctive site logo and site name 
across the website, creating a unified visual identity that resonates with 
your brand. It would be a tedious job applying the same properties to all the 
documents.

Also, in the future, if you add new properties or change one or more values of
the properties, then you would need to manually update it on all the pages.

To maintain a consistent brand image across the pages throughout the website,
and make it easy to update with a single change, we can create a custom page
component. This component can include the site logo, site name, color scheme, 
and typography, along with other properties, sparing us the need to apply 
them individually to each and every page.

To do the same, we will move the component definition in a separate document, 
let's call it `my-ds.ftd`.

And create our custom component:

-- ds.code: my-ds
lang: ftd

\-- component page:
optional caption title:
optional body body:
children wrapper:

\-- ds.page: $page.title
body: $page.body
site-name: Ajit
site-logo: $assets.files.images.logo.svg
site-url: https://fastn.com/

\-- end: ds.page

\-- end: page


-- ds.markdown:

Now as we know we are going to use the `doc-site` package and `my-ds` in all 
or most of the documents, therefore we can auto-import them. 


-- ds.code: my-ds
lang: ftd

\-- fastn.auto-import: fastn-community.github.io/doc-site as ds
\-- fastn.auto-import: <package-name>/my-ds as my-ds


-- ds.markdown:

Now we can use the component in the my-ds document without worrying about
missing out on any property. So we get the brand identity across our
documentation.



;; =================== 
;; Code block Template
;; ===================


/-- ds.code: Syntax
lang: ftd




;; ============== 
;; Image Template
;; ==============

/-- ds.image:
if: { show-planning }
src: $fastn-assets.files.expander.ds.img.



;; =================  
;; Rendered Template
;; =================


/-- ds.rendered: 

/-- ds.rendered.input:


/-- ds.rendered.output:


/-- end: ds.rendered.output

/-- end: ds.rendered





/-- ds.markdown:

Therefore, we can safely say, the `page` component offers as a powerful tool 
for all kind of documentation without restrictions.


-- ds.h1: Closing Remarks 
if: { show-planning }

Thank you guys, keep watching these videos to learn more about fastn. Checkout
the `fastn` website. 

Support us by clicking on this link and give us a star ‚≠ê on GitHub and join 
our fastn community on Discord.


-- ds.markdown: 
if: { !show-planning }

Thank you guys, keep watching these videos to learn more about fastn. 

Support us by giving a star ‚≠ê on 
[GitHub](https://github.com/fastn-stack/fastn/) and join our fastn community 
on [Discord](/discord/).


/-- ds.h1: Final Video
if: { show-planning }

/-- ds.youtube:
if: { show-planning }
v: 


-- end: my-ds.page


-- boolean $show-planning: false
$processor$: pr.get-data
key: show-planning

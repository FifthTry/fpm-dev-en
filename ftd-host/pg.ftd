-- import: fastn.com/ftd/built-in-variables as v
-- import: fastn/processors as pr
-- import: fastn.com/ftd-host/processor


-- ds.page: Querying PostgreSQL Using `fastn`


Note: This document is about querying PostgreSQL Database. You can also [query
SQLite using `fastn`](/sqlite/).

`pg` processor allows you to execute SQL queries against a PostgreSQL database.

-- processor.static-vs-dynamic:

-- ds.markdown:

Say you have an PostgreSQL database with a table like this:

-- ds.code: creating table
lang: sql

CREATE TABLE users (
    id SERIAL,
    name TEXT,
    department TEXT
);

-- ds.markdown:

And you have initilised it like this:

-- ds.code: inserting data
lang: sql

INSERT INTO "users" (name, department) VALUES ('jack', 'design');
INSERT INTO "users" (name, department) VALUES ('jill', 'engineering');


-- ds.h1: Telling `fastn` about your database

Before we make any queries we have to inform `fastn` about your PostgreSQL
database credentials.

-- ds.code:
lang: sh

export FASTN_PG_URL=postgres://username:password@db-host/db-name

-- ds.markdown:

The `FASTN_PG_URL` must contain a valid [connection
string](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING).


-- ds.h1: Querying Data

If `.env` file is properly setup you can fetch data from the SQLite database
using `pg` processor:

-- ds.code: querying database and storing result in a list
lang: ftd

\-- import: fastn/processors as pr

\-- person list people:
$processor$: pr.pg

SELECT * FROM users;

-- ds.markdown:

For this to work you have to also create a record with same data as the result
of your SQL query. In this query you are using `SELECT *`, which will fetch all
three columns, `id`, `name` and `department`, so your record will look something
like this:

-- ds.code: a record corresponding to your query result
lang: ftd

\-- record person:
integer id:
string name:
string department:


-- ds.markdown:

Note that the type columns in query result must match the type of fields in the
record. The order of fields of record must also match the order of columns in
the query result.

Also note that since the result of this query can be multiple rows (or one or
none), we have to read the result in a `person list`, so all data can be stored
in corresponding list.

-- ds.markdown:

Now that you have data in a variable, you can pass it to some component to view
it using the [`$loop$`](/list/#using-loop):


-- ds.code: show data in page
lang: ftd

\-- show-person: $p
for: $p in $people


-- ds.markdown:

Which will look something like this:


-- show-person: $p
for: $p in $people


-- ds.h1: Environment Variables

-- ds.h2: `FASTN_PG_URL`

The `FASTN_PG_URL` must contain a valid [connection
string](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING).

This processor will not work if this environment variable is not present.

-- ds.h2: `FASTN_PG_DANGER_DISABLE_SSL`

By default `fastn` connects to PostgreSQL over a secure connection. You can set
`FASTN_PG_DANGER_DISABLE_SSL` to `false` if you want to connect to a insecure
connection.

This is not recommended in production.

-- ds.h2: `FASTN_PG_SSL_MODE`

`fastn` can connect to a PostgreSQL in a few different secure mode. See
PostgreSQL official documentation on [SSL Mode
Descriptions](https://www.postgresql.org/docs/current/libpq-ssl.html#LIBPQ-SSL-SSLMODE-STATEMENTS).

`FASTN_PG_SSL_MODE=require` is default and recommended for production.

`FASTN_PG_SSL_MODE=prefer` is allowed but not recommended for production as it
offers no benefits of encryption (is suseptible to MITM attack).

`verify-ca` and `verify-full` are both better than `require`, but we do not
support them yet because the underlying we are using, [deadpool, does not support
it yet](https://docs.rs/deadpool-postgres/0.11.0/deadpool_postgres/enum.SslMode.html).
We have created a [tracking issue for
this](https://github.com/bikeshedder/deadpool/issues/277).

-- ds.h2: `FASTN_PG_DANGER_ALLOW_UNVERIFIED_CERTIFICATE`

`fastn` can ignore invalid ceritificates when connecting to PostgreSQL if you
set `FASTN_PG_DANGER_ALLOW_UNVERIFIED_CERTIFICATE` to `true`. This is not
recommended for production.

-- ds.h2: `FASTN_PG_CERTIFICATE`

If you have access to root certificate of the certificate authority who issued
the certificate used by PostgreSQL.

Note that this is [not working right now when tested with
Supabase](https://github.com/fastn-stack/fastn/issues/1383).

Since this is not working, the only way to connect is by using
`FASTN_PG_DANGER_ALLOW_UNVERIFIED_CERTIFICATE=true` right now.

-- end: ds.page




-- record person:
integer id:
string name:
string department:

-- person list people:

-- person:
id: 1
name: jack
department: design

-- person:
id: 2
name: jill
department: engineering

-- end: people



-- component show-person:
caption person p:

-- ftd.column:
spacing.fixed.px: 10

-- ds.h2: Person

-- v.label-text: Name
value: $show-person.p.name

-- v.label-text: Department
value: $show-person.p.department

-- end: ftd.column

-- end: show-person

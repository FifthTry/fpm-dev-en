-- import: fifthtry.github.io/admonitions as cbox

-- my-ds.page: `component`

A `component` in `ftd` is similar to "react component". Components are
independent and reusable bits of code. `component`s have  "arguments", these are
the data that must be passed to them, and using `component`s we construct the
user interface.

-- ds.h1: Create Your First Component

New components are defined using the `component` keyword followed by component
name:

-- ds.code: Creating a component named `heading`
lang: ftd

\-- component heading:

\-- ftd.text: My Heading
color: red

\-- end: heading

-- ds.markdown:

Here, we have defined a new component `heading`. This component is using
[`ftd.text`](ftd/text/), a kernel component, as a definition. We have created a
custom-component which shows given text in `red` color.

-- ds.h2: Kernel Components

So, how is `ftd.text` implemented? `ftd` comes with some "kernel components",
these are the lowest level components that every other component uses directly
or indirectly.

Read about our [kernel components guide](ftd/kernel/) to learn about
these components.


-- ds.h1: Rendering a Component

Till now, we have created a component called `heading`. Now to invoke or render
this component in your `ftd` application, we can do the following:


-- ds.rendered:
copy: true

-- ds.rendered.input:

\-- heading:

-- ds.rendered.output:

-- heading: My Heading

-- end: ds.rendered.output


-- ds.markdown:

Currently, `My Heading` is fixed text displayed by `heading` component. We can
make it customisable by using attributes.



-- ds.h1: Component Arguments

Component "arguments" refer to the inputs that are passed into a component when
it is called or invoked. These arguments provide the component with the
necessary data that is helpful to configure or customize the component's
behavior or appearance.


-- ds.h2: Defining Component Arguments

Component arguments starts with argument type follow by argument name, in our
component we have one such argument, `title`.

The type of our `title` argument is [`string`](ftd/built-in-types/#string).

The arguments in `ftd` components creates variables for each component
invocation. These variables have local scope. This means that these variables
can be accessed only inside the component definition in which they are declared.

-- ds.code: Using the `title` argument in the component
lang: ftd

\-- component heading:
string title:

\-- ftd.text: $heading.title
color: red

\-- end: heading


-- ds.h2: Adding Attributes to Component

When the component is used in another component or in the main application, the
`title` can be passed in as an attribute of the component:

-- ds.rendered:
copy: true

-- ds.rendered.input:

\-- heading:
title: I love `ftd`!

-- ds.rendered.output:

-- heading:
title: I love `ftd`!

-- end: ds.rendered.output


-- ds.h2: Using Special Type Arguments

We can use special types like [`caption`](ftd/built-in-types/#caption),
[`body`](ftd/built-in-types/#body) or [`caption or
body`](ftd/built-in-types/#caption-or-body) that give us flexibility to pass
attributes in different location of [`ftd::p1`
"section"](ftd/p1-grammar/#section-caption).

Let's use `caption or body` type using which we can pass attributes in either
`caption` or `body` area.


-- ds.code: `caption or body` type for `title` argument
lang: ftd

\-- component heading:
caption or body title:

\-- ftd.text: $heading.title
color: red

\-- end: heading


-- ds.h3: Passing Attribute in Caption

Passing attribute in caption area makes the component more concise and readable.
It also make it clear what the component represents and what its purpose is.

-- ds.rendered:
copy: true

-- ds.rendered.input:

\-- heading: I am in caption area.

-- ds.rendered.output:

-- heading: I am in caption area.

-- end: ds.rendered.output


-- ds.h3: Passing Attribute in Body

Passing attributes in the body area can help make it more readable by providing
a way to break up complex or lengthy inputs into more manageable chunks of text.

-- ds.rendered:
copy: true

-- ds.rendered.input:

\-- heading:

I am in body area.

Since I am long description, it's better to pass it here. Isn't it?

-- ds.rendered.output:

-- heading:

I am in body area.

Since I am long description, it's better to pass it here. Isn't it?

-- end: ds.rendered.output


-- cbox.info: Special types

By default `caption` or `body` is alias for `string` but if you want to pass
types other than `string` you can do the following:

-- ds.rendered:
copy: true

-- ds.rendered.input:

\-- component show-number:
caption integer number:

\-- ftd.integer: $show-number.number

\-- end: show-number

\-- show-number: 45

-- ds.rendered.output:

-- show-number: 45

-- end: ds.rendered.output

-- end: cbox.info



-- end: my-ds.page



/-- my-ds.page: `component`

A `component` in `ftd` is similar to "react component". Components are
independent and reusable bits of code. `component`s have  "arguments", these are
the data that must be passed to them, and using `component`s we construct the
user interface.


-- ds.h1: Defining A Component

New components are defined using the `component` keyword:


-- ds.code:
lang: ftd

\-- component heading:
string title:

\-- ftd.text: $heading.title
color: red

\-- end: heading


-- ds.markdown:

Here, we have defined a new component `heading`. This component is using
`ftd.text`, a kernel component, as a definition. We have created a
custom-component which shows given text in `red` color.




-- ds.h2: Component Arguments

Component "arguments" starts with argument type follow by argument name, in our
component we have one such argument, `title`.

The type of our `title` argument is [`string`](ftd/built-in-types/#string).

The arguments in `ftd` components creates variables for each component
invocation. These variables have local scope. This means that these variables
can be accessed only inside the component definition in which they are declared.


-- ds.h2: Component Invocation

Till now, we have created a component called `heading`. Now to invoke or render
this component in your `ftd` application, we can do the following:


-- ds.code:
lang: ftd

\-- heading: I love FTD!!

-- ds.markdown:

The output looks like this:

-- ds.output: `heading` invocation

-- heading: I love FTD!!

-- end: ds.output



-- ds.h3: Arguments with Default Values

An argument can be defined with a default value:


-- ds.code:
lang: ftd

\-- component foo:
caption name:
ftd.color text-color: red

\-- ftd.text: $foo.name
color: $foo.text-color

\-- end: foo


;; uses default value of text-color
\-- foo: hello

\-- foo: this is nice
text-color: green


-- ds.markdown:

Since `foo` defines `text-color` with a default value, it is used in the first
instance, and in second we overwrite the default value with `green`.

-- ds.output: `foo` with default `text-color`

--  foo: hello

-- end: ds.output


-- ds.output: `foo` with `text-color` value as `green`

-- foo: this is nice
text-color: green

-- end: ds.output


-- ds.h2: Component Arguments for event handling

The arguments in `ftd` components can be used for handling events.


-- ds.code:
lang: ftd

\-- component foo-with-event:
caption name:
boolean $open: true

\-- ftd.text: $foo-with-event.name
if: { foo-with-event.open }
$on-click$: $ftd.toggle($a = $foo-with-event.open)

\-- end: foo-with-event


-- ds.markdown:

This will create an `open` variable with local scope. We are using `if` to only
show the component if `open` is `true`, which will be the case by default as we
have given default value as `true` to `open` declaration.

We have also set `click` event handler with an action `$ftd.toggle($a =
$foo-with-event.open)`, so the effect would be if someone clicks on the message,
it will go away.


-- ds.output: `foo` with `text-color` value as `green`

-- foo-with-event: I'll hide if you click me!

-- end: ds.output


-- ds.h2: Using Container Components

Some components have children. `ftd` comes with two kernel container components,
[`ftd.row`](ftd/row/) and [`ftd.column`](ftd/column/).


-- ds.code:
lang: ftd

\-- component label:
caption name:
body value:

\-- ftd.row:
spacing.fixed.px: 5

\-- ftd.text: $label.name

\-- ftd.text: $label.value

\-- end: ftd.row

\-- end: label



-- ds.markdown:

Here we are trying to create a "label" component, which has two arguments,
`name` and `value`.

The `label` component is an `ftd.row` and has two `ftd.text` children.
`ftd.row` shows its children in a single row.

Note that the two `ftd.text` are sub-sections of the `ftd.row` section (review
[ftd.p1 grammar](ftd/p1-grammar/)).

We have passed the component arguments `name` and `value` to first and second
`ftd.text` respectively.

A container component can use other container components and create an hierarchy
of such components.


-- ds.h1: Using Components

Say we want to use our heading and label components:


-- ds.code:
lang: ftd

\-- ftd.column:
spacing.px: 20
border-width.px: 1
border-radius.px: 5
padding.px: 10

\-- heading: hello there! This is my heading

\-- label: Name
value: Amit Upadhyay

\-- label: Location
value: Bangalore, India

\-- end: ftd.column


-- ds.markdown:

Here we have created one heading and two labels. 

We have placed the `heading` and `label`s inside an `ftd.column` to put some 
spacing between them.

This is how it looks like:



-- ds.output: `heading` and `label` in `ftd.column`

-- ftd.column:
spacing.fixed.px: 20
border-width.px: 1
border-radius.px: 5
border-color: $inherited.colors.border
padding.px: 20

-- heading: hello there! This is my heading

-- label: Name:
value: Amit Upadhyay

-- label: Location:
value: Banglore, India

-- end: ftd.column

-- end: ds.output





-- ds.h1: Conditional Components

`ftd` supports a `if` to decide if the component should be visible or not, based
on the arguments, or global variables.


-- ds.code:
lang: ftd

\-- boolean dark-mode: true

\-- ftd.text: we are in dark mode
if: { ftd.dark-mode }

\-- ftd.text: we are in light mode
if: { !ftd.dark-mode }


-- ds.output: Conditional component

-- ftd.text: we are in dark mode
color: $inherited.colors.text
if: { ftd.dark-mode }

-- ftd.text: we are in light mode
color: $inherited.colors.text
if: { !ftd.dark-mode }

-- end: ds.output


-- ds.markdown:

We have inserted two `ftd.text` components, but only one of them would be visible,
based on the value of the `dark-mode` variable.

Read more about it in [conditional components guide](ftd/if/).


-- end: my-ds.page










-- component heading:
caption or body title:

-- ftd.text:
text: $heading.title
color: red

-- end: heading








-- component label: 
caption name:
body value:

-- ftd.row:
width: fill-container
spacing.fixed.px: 5
color: $inherited.colors.text

-- ftd.text: $label.name

-- ftd.text: $label.value

-- end: ftd.row

-- end: label








-- component foo:
caption name:
ftd.color text-color: red

-- ftd.text: $foo.name
color: $foo.text-color

-- end: foo









-- component foo-with-event:
caption name:
boolean $open: true

-- ftd.text: $foo-with-event.name
if: { foo-with-event.open }
$on-click$: $ftd.toggle($a = $foo-with-event.open)
color: $inherited.colors.text

-- end: foo-with-event



-- component show-number:
caption integer number:

-- ftd.integer: $show-number.number

-- end: show-number

\-- ft-core.concept:

-- my-ds.page: Built-in Types


-- ds.markdown: 

`ftd` comes with some built-in types. These types can be used to construct more
complex types like [`record`](ftd/record/) and [`or-type`](ftd/or-type/).

-- ds.h1: `boolean`

This type is used to represent boolean values `true` and `false`.

-- ds.code:
lang: ftd

\-- boolean is-monday: true

-- ds.h1: `integer`

This is integer type, can be positive or negative.

-- ds.code:
lang: ftd

\-- integer number-of-days-in-a-week: 7


-- ds.h1: `decimal`

This type is used to represent decimal numbers.

-- ds.code:
lang: ftd

\-- decimal pi: 3.14159


-- ds.h1: `string`

This is unicode string.

-- ds.code:
lang: ftd

\-- string message: hello world!

-- ds.code: a multi-line string
lang: ftd

\-- string message:

this is a multiline string.

can have any number of lines.

or long paragraph, if you have a long paragraph to write. it can
contain unicode characters in any ‡§≠‡§æ‡§∑‡§æ, or emojis, üíÅüëåüéçüòç.

-- ds.h1: `caption`

`caption` is a special type, it is an alias for `string`, but can not be used
when declaring a [variable](ftd/variables/).

This type is used for [`record`](ftd/record/), [`or-type`](ftd/or-type/). and
`component` arguments.

If a `record` or `or-type` field, or `component` argument is defined as `caption`,
it can be passed in the "caption" location in [`ftd::p1`
"section"](ftd/p1-grammar/#section-caption).

-- ds.code: record with caption
lang: ftd

\-- record person:
caption name:

\-- person amitu: Amit Upadhyay

\-- person shobhit:
name: Shobhit Sharma

-- ds.markdown:

If something is specified as `caption`, it can come in the "caption" location, eg
in case of `amitu` var, or it can come as an explicit key, as in the declaration
of `shobhit` variable.

-- ds.h1: `body`

`body` is a special type, it is an alias for `string`, but can not be used when
declaring a variable.

This type is used for `record`, `or-type` and `component` arguments.

If a `record` or `or-type` field, or `component` argument is defined as `body`,
it can be passed in the "body" location in [`ftd::p1`
"section"](ftd/p1-grammar/#section-body).

-- ds.code: record with body
lang: ftd

\-- record person:
name: caption
bio: body

\-- person amitu: Amit Upadhyay

this is single

or multi-line bio of Amit.

\-- person shobhit:
name: Shobhit Sharma
bio: or we can put things in "header"

-- ds.markdown:

If something is specified as `body`, it can come in the "body" location, eg in
case of `amitu` var, or it can come as an explicit key, as in the declaration of
`shobhit` variable.

-- ds.h1: `caption or body`

`caption or body` is a special type, it is an alias for `string`, but can not be
used when declaring a variable.

This type is used for `record`, `or-type` and `component` arguments.

If a `record` or `or-type` field, or `component` argument is defined as `caption
or body`, it can be passed in either the "caption" or "body" location in
`ftd::p1` "section".

-- ds.code: record with caption or body
lang: ftd

\-- record person:
caption or body name:

\-- person amitu: Amit Upadhyay

\-- person shobhit:
name: Shobhit Sharma

\-- person abrar:

Abrar Khan

-- ds.markdown:

If something is specified as `caption or body`, it can come in the "caption"
location, eg in case of `amitu` var, or it can come as an explicit key, as in
the declaration of `shobhit` variable, or in "body" location, eg for `abrar`.


-- ds.h1: `ftd.color`

It is record type with the following fields.

-- ds.code: `ftd.color` record (ftd.ftd)
lang: ftd

\-- record color:
caption light:
string dark: $color.light

-- ds.markdown:

It shows color in `light` field in light mode and color in `dark` field in dark
mode. If value is not provided for `dark` field, it will take `light` field's
value as default.

Consider the following example:

-- ds.code: Two colors
lang: ftd

\-- ftd.color red-orange:
light: red
dark: orange

-- ds.markdown:

This would return `red` color in light mode and `orange` color in dark mode.

-- ds.code: One color
lang: ftd

\-- ftd.color just-red:
light: red

\;; or

\-- ftd.color just-red: red

-- ds.markdown:

This would return `red` color in both light mode and dark mode.

Lets look at example of using `ftd.color` type variable.

-- ds.code: Two colors
lang: ftd

\-- ftd.color red-orange:
light: red
dark: orange

\-- ftd.text: Switch your color mode (light/dark)
color: $red-orange


-- ds.markdown:

The output will look like this. Switch your color mode (light/dark) to see the
wonder!

-- ds.output:

-- ftd.text: Switch your device mode (light/dark)
color: $red-orange

-- end: ds.output



-- ds.h2: Supported Color Formats

The value of `light` and `dark` can be any string supported by [CSS3 Color
spec](https://www.w3.org/TR/css-color-3/).

Along with CSS3 colors we also support 8 digit RGBA format (eg `#RRGGBBAA`) from
[CSS Color Module Level 4](https://www.w3.org/TR/css-color-4/).







-- ds.h1: `ftd.image-src`

`ftd.image-src` is a record. The 'src' property of `ftd.image` component
accepts this type. It stores image URL for both light and dark mode.

-- ds.code: `ftd.image-src` record (ftd.ftd)
lang: ftd

\-- record image-src:
caption light:
string dark: $image-src.light


-- ds.markdown:

It shows image in `light` field in light mode and image in `dark` field in dark
mode. If value is not provided for `dark` field, it will take `light` field's
value as default.

Consider the following example:

-- ds.code: Two images
lang: ftd

\-- ftd.image-src my-images:
light: https://fastn.io/-/fastn.io/images/fastn.svg
dark: https://fastn.io/-/fastn.io/images/fastn-dark.svg

-- ds.markdown:

This would return `https://fastn.io/-/fastn.io/images/fastn.svg` in light mode
and `https://fastn.io/-/fastn.io/images/fastn-dark.svg` in dark
mode.

-- ds.code: One image
lang: ftd

\-- ftd.color just-light:
light: https://fastn.io/-/fastn.io/images/fastn.svg

\;; or

\-- ftd.color just-light: https://fastn.io/-/fastn.io/images/fastn.svg

-- ds.markdown:

This would return `https://fastn.io/-/fastn.io/images/fastn.svg` in both light
mode and dark mode.

Lets look at example of using `ftd.image-src` type variable.

-- ds.code: Two colors
lang: ftd

\-- ftd.image-src my-images:
light: https://fastn.io/-/fastn.io/images/fastn.svg
dark: https://fastn.io/-/fastn.io/images/fastn-dark.svg

\-- ftd.image:
src: $my-images


-- ds.markdown:

The output will look like this. Switch your color mode (light/dark) to see the
wonder!

-- ds.output:

-- ftd.image:
src: $fastn-assets.files.images.fastn.svg

-- end: ds.output

-- ds.markdown:

Instead of passing the image URL, you can use package `assets` foreign variable.
Check [foreign variable in Variable page](ftd/variables/#foreign-variables) to
know more.

-- ds.code: Image using assets
lang: ftd

\-- import: fastn.io/assets as fastn-assets

\-- ftd.image:
src: $fastn-assets.files.images.fastn.svg


-- ds.markdown:

The output will look same as above.

-- ds.output:

-- ftd.image:
src: $fastn-assets.files.images.fastn.svg

-- end: ds.output

-- ds.markdown:

`files` in `assets` variable gives url to files present in package. So,
`$fastn-assets.files.images.fastn.svg` gives url of
`<path-to-package>/images/fastn.svg` as value (for `light` field).

Now, you must be wondering how does it get two different value of image for
light mode and dark mode. The `assets` variable append the `-dark` at the end of
image name, if any image with such name exists, for `dark` field. So, for above
reference, the `light` field gets `<some-extra>/fastn.svg`, but `dark` field
gets `<some-extra>/fastn-dark.svg`, since
`<path-to-package>/images/fastn-dark.svg` exists in the package.



-- ds.h2: Supported Color Formats

The value of `light` and `dark` can be any string supported by [CSS3 Color
spec](https://www.w3.org/TR/css-color-3/).

Along with CSS3 colors we also support 8 digit RGBA format (eg `#RRGGBBAA`) from
[CSS Color Module Level 4](https://www.w3.org/TR/css-color-4/).








-- ds.h1: `ftd.type`

It defines the typography of the font. It is record with the following fields.

-- ds.code: `type` record (ftd.ftd)
lang: ftd

\-- record type:
optional ftd.font-size size:
optional ftd.font-size line-height:
optional ftd.font-size letter-spacing:
optional integer weight:
optional string font-family:

-- ds.markdown:

It defines the line-height, size, weight, font-family and letter-spacing.

-- ds.h2: `line-height`

The `line-height` field sets the height of a line box. It's commonly
used to set the distance between lines of text.

-- ds.h2: `size`

The `size` field sets the size of the font.

-- ds.h2: `weight`

The `weight` property sets the weight (or boldness) of the font. The
weights available depend on the `font-family` that is currently set.

-- ds.h2: `font-family`

The `font-family` property specifies a font family name and/or generic family
name for the selected element.

-- ds.h2: `letter-spacing`

The `letter-spacing` sets the horizontal spacing behavior between text
characters. This value is added to the natural spacing between characters
while rendering the text. Positive values of letter-spacing causes
characters to spread farther apart, while negative values of letter-spacing
bring characters closer together.

-- ds.code:
lang: ftd

\-- ftd.type dtype:
size.px: 40
weight: 700
font-family: cursive
line-height.px: 65
letter-spacing.px: 5





-- ds.h1: `ftd.loading`

`ftd.loading` is a or-type. This is the type for `loading` property of
`ftd.iframe` component. It is a strategy to identify whether resources are
blocking and load these immediately or non-blocking (non-critical) and load
these only when needed.

-- ds.code: `ftd.loading`
lang: ftd

\-- or-type loading:

\-- constant string lazy: lazy
\-- constant string eager: eager

\-- end: loading


-- ds.markdown:

It has two variants `lazy` and `eager`.

- `eager`: Loads an element immediately
- `lazy`: Defer loading of element until some conditions are met






-- ds.h1: `ftd.text-input-type`

`ftd.text-input-type` is an `or-type`. The 'type' property of `ftd.text-input`
component accepts the `optional` of this type. It has various variant which
defines information field type.

-- ds.code: `ftd.text-input-type`
lang: ftd

\-- or-type text-input-type:

\-- constant string text: text
\-- constant string email: email
\-- constant string password: password
\-- constant string url: url

\-- end: text-input-type

-- ds.markdown:

As you can see above the `ftd.text-input-type` has following variants:

- **text**: The default value. A single-line text field. Line-breaks are
automatically removed from the input value.

- **email**: A field for editing an email address. Looks like a `text` input,
but has validation parameters and relevant keyboard in supporting browsers and
devices with dynamic keyboards.

- **password**: A single-line text field whose value is obscured. Will alert
user if site is not secure.

- **url**: A field for entering a URL. Looks like a `text` input, but has
validation parameters and relevant keyboard in supporting browsers and devices
with dynamic keyboards.













/-- ds.h1: `ftd.type`

It defines the typography of the font.

It is record type with the following fields.

/-- ds.code: `ftd.type` record (ftd.ftd)
lang: ftd

\-- record type:
string font:
ftd.font-size desktop:
ftd.font-size mobile:
ftd.font-size xl:
integer weight:
optional string style:


/-- ds.markdown:

It defines the:

- `font`: A prioritized list of one or more font family
  names and/or generic family names for the selected element.
- `desktop`, `mobile` and `xl`: These are of `ftd.font-size` type. These
  are responsive. So only one of these will be applicable depending on device.
- `weight`: The weight (or boldness) of the font.
- `style`: The appearance of decorative lines on text or styling of font. It is
  an optional field. It takes the following values: `italic`, `underline` and
  `strike`. More than one of these values can be using space separation.
  Example: `style: italic underline`


/-- ds.code:
lang: ftd

\-- ftd.font-size desktop-fs:
line-height: 30
size: 24
letter-spacing: 0

\-- ftd.font-size mobile-fs:
line-height: 20
size: 16
letter-spacing: 0

\-- ftd.font-size xl-fs:
line-height: 50
size: 46
letter-spacing: 0

\-- ftd.type font-type:
font: serif
desktop: $desktop-fs
mobile: $mobile-fs
xl: $xl-fs
weight: 400
style: italic


/-- ds.h1: `length`

`length` is a type that is used for passing UI dimensions. It has one of the

`length` accepts following set of string:

- `fill`: This gives 100% space
- `auto`: This gives auto space (read more about it in `auto` css property value)
- `calc <some-value>`: It takes a single expression as its parameter, with the
   expression's result used as the value. Example: `width: calc 100% - 80px`
- `fit-content`: the element will use the available space, but never more than max-content.
   Example: `width: fit-content`
- `portion <integer>`: It specifies how much the item will grow relative to the
   rest of the items inside the same container.
- `percent <integer>`: This gives <integer>% space
- `vh <integer>`: Relative to 1% of the height of the viewport
- `vw <integer>`: Relative to 1% of the width of the viewport
- `<integer>`: Gives <integer>px unit space.

;; Todo: Add all types from cheatsheet

-- end: my-ds.page


-- ftd.color red-orange:
light: red
dark: orange

\-- ft-core.concept:


-- my-ds.page: Built-in Types


-- ds.markdown: 

`ftd` comes with some built-in types. These types can be used to construct more
complex types like [`record`](ftd/record/) and [`or-type`](ftd/or-type/).

-- ds.h1: `boolean`

This type is used to represent boolean values `true` and `false`.

-- ds.code:
lang: ftd

\-- boolean is-monday: true

-- ds.h1: `integer`

This is integer type, can be positive or negative.

-- ds.code:
lang: ftd

\-- integer number-of-days-in-a-week: 7


-- ds.h1: `decimal`

This type is used to represent decimal numbers.

-- ds.code:
lang: ftd

\-- decimal pi: 3.14159


-- ds.h1: `string`

This is unicode string.

-- ds.code:
lang: ftd

\-- string message: hello world!

-- ds.code: a multi-line string
lang: ftd

\-- string message:

this is a multiline string.

can have any number of lines.

or long paragraph, if you have a long paragraph to write. it can
contain unicode characters in any ‡§≠‡§æ‡§∑‡§æ, or emojis, üíÅüëåüéçüòç.

-- ds.h1: `caption`

`caption` is a special type, it is an alias for `string`, but can not be used
when declaring a [variable](ftd/variables/).

This type is used for [`record`](ftd/record/), [`or-type`](ftd/or-type/). and
`component` arguments.

If a `record` or `or-type` field, or `component` argument is defined as `caption`,
it can be passed in the "caption" location in [`ftd::p1`
"section"](ftd/p1-grammar/#section-caption).

-- ds.code: record with caption
lang: ftd

\-- record person:
caption name:

\-- person amitu: Amit Upadhyay

\-- person shobhit:
name: Shobhit Sharma

-- ds.markdown:

If something is specified as `caption`, it can come in the "caption" location, eg
in case of `amitu` var, or it can come as an explicit key, as in the declaration
of `shobhit` variable.

-- ds.h1: `body`

`body` is a special type, it is an alias for `string`, but can not be used when
declaring a variable.

This type is used for `record`, `or-type` and `component` arguments.

If a `record` or `or-type` field, or `component` argument is defined as `body`,
it can be passed in the "body" location in [`ftd::p1`
"section"](ftd/p1-grammar/#section-body).

-- ds.code: record with body
lang: ftd

\-- record person:
name: caption
bio: body

\-- person amitu: Amit Upadhyay

this is single

or multi-line bio of Amit.

\-- person shobhit:
name: Shobhit Sharma
bio: or we can put things in "header"

-- ds.markdown:

If something is specified as `body`, it can come in the "body" location, eg in
case of `amitu` var, or it can come as an explicit key, as in the declaration of
`shobhit` variable.

-- ds.h1: `caption or body`

`caption or body` is a special type, it is an alias for `string`, but can not be
used when declaring a variable.

This type is used for `record`, `or-type` and `component` arguments.

If a `record` or `or-type` field, or `component` argument is defined as `caption
or body`, it can be passed in either the "caption" or "body" location in
`ftd::p1` "section".

-- ds.code: record with caption or body
lang: ftd

\-- record person:
caption or body name:

\-- person amitu: Amit Upadhyay

\-- person shobhit:
name: Shobhit Sharma

\-- person abrar:

Abrar Khan

-- ds.markdown:

If something is specified as `caption or body`, it can come in the "caption"
location, eg in case of `amitu` var, or it can come as an explicit key, as in
the declaration of `shobhit` variable, or in "body" location, eg for `abrar`.




-- ds.h1: Derived Types





-- ds.h1: `ftd.color`

It is record type with the following fields.

-- ds.code: `ftd.color` record (ftd.ftd)
lang: ftd

\-- record color:
caption light:
string dark: $color.light

-- ds.markdown:

The `light` field of `ftd.image-src` stores the color to be displayed in
light mode, while the `dark` field stores the color to be displayed in dark
mode. If the `dark` field is not provided, the `light` field's value is used as
a default.

-- ds.h2: Example Usage

Consider the following example:

-- ds.code: Two colors
lang: ftd

\-- ftd.color red-orange:
light: red
dark: orange

-- ds.markdown:

This would return `red` color in light mode and `orange` color in dark mode.

It is also possible to use `ftd.color` with only one field. For example:

-- ds.code: One color
lang: ftd

\-- ftd.color just-red:
light: red

\;; or

\-- ftd.color just-red: red

-- ds.markdown:

This would return `red` color in both light mode and dark mode.

-- ds.h2: Using `ftd.color` in component property

Lets look at example of using `ftd.color` type variable.

-- ds.code: Two colors
lang: ftd

\-- ftd.color red-orange:
light: red
dark: orange

\-- ftd.text: Switch your color mode (light/dark)
color: $red-orange


-- ds.markdown:

In this example, the `ftd.text` component will display color of text specified
in `red-orange` variable, based on the current color mode.

The output will look like this. Switch your color mode (light/dark) to see the
wonder!

-- ds.output:

-- ftd.text: Switch your device mode (light/dark)
color: $red-orange

-- end: ds.output



-- ds.h2: Supported Color Formats

The value of `light` and `dark` can be any string supported by [CSS3 Color
spec](https://www.w3.org/TR/css-color-3/).

Along with CSS3 colors we also support 8 digit RGBA format (eg `#RRGGBBAA`) from
[CSS Color Module Level 4](https://www.w3.org/TR/css-color-4/).







-- ds.h1: `ftd.image-src`

`ftd.image-src` is a record type used to store image URLs for both light and
dark mode. This record is a type for the 'src' property of `ftd.image`
component.

The record structure of `ftd.image-src` is as follows:

-- ds.code: `ftd.image-src` record (ftd.ftd)
lang: ftd

\-- record image-src:
caption light:
string dark: $image-src.light


-- ds.markdown:

The `light` field of `ftd.image-src` stores the image URL to be displayed in
light mode, while the `dark` field stores the image URL to be displayed in dark
mode. If the `dark` field is not provided, the `light` field's value is used as
a default.

-- ds.h2: Example Usage

Consider the following example:

-- ds.code: Two images
lang: ftd

\-- ftd.image-src my-images:
light: https://fastn.io/-/fastn.io/images/fastn.svg
dark: https://fastn.io/-/fastn.io/images/fastn-dark.svg

-- ds.markdown:

In this example, the image URL `https://fastn.io/-/fastn.io/images/fastn.svg` is
returned in light mode, while `https://fastn.io/-/fastn.io/images/fastn-dark.svg`
is returned in dark mode.

It is also possible to use `ftd.image-src` with only one field. For example:

-- ds.code: One image
lang: ftd

\-- ftd.color just-light:
light: https://fastn.io/-/fastn.io/images/fastn.svg

\;; or

\-- ftd.color just-light: https://fastn.io/-/fastn.io/images/fastn.svg

-- ds.markdown:

In this case, the same image URL `https://fastn.io/-/fastn.io/images/fastn.svg`
is returned in both light and dark modes.

-- ds.h2: Using `ftd.image-src` with `ftd.image` Component

Lets look at example of using `ftd.image-src` type variable.
The `ftd.image-src` record is a type used for the 'src' property of `ftd.image`
component, as shown below:

-- ds.code: Two images
lang: ftd

\-- ftd.image-src my-images:
light: https://fastn.io/-/fastn.io/images/fastn.svg
dark: https://fastn.io/-/fastn.io/images/fastn-dark.svg

\-- ftd.image:
src: $my-images


-- ds.markdown:

In this example, the `ftd.image` component will display the image URL specified
in `my-images` variable, based on the current color mode.

The output will look like this. Switch your color mode (light/dark) to see the
wonder!

-- ds.output:

-- ftd.image:
src: $fastn-assets.files.images.fastn.svg

-- end: ds.output

-- ds.h2: Using assets Foreign Variable

Instead of passing the image URL directly, it is possible to use the `assets`
foreign variable to access files present in a package.
Check [foreign variable in Variable page](ftd/variables/#foreign-variables) to
know more.

To use the `assets` variable, import the package as shown below:

-- ds.code: Image using assets
lang: ftd

\-- import: fastn.io/assets as fastn-assets

-- ds.markdown:

Then, use the `files` field of `assets` variable to access files present in the
package. For example:

-- ds.code: Image using assets
lang: ftd

\-- import: fastn.io/assets as fastn-assets

\-- ftd.image:
src: $fastn-assets.files.images.fastn.svg


-- ds.markdown:

The output will look same as above.

-- ds.output:

-- ftd.image:
src: $fastn-assets.files.images.fastn.svg

-- end: ds.output

-- ds.markdown:

In this example, the `src` property of `ftd.image` component will be set to the
URL of `fastn.svg` file present in the `images` folder of the `fastn.io`
package. i.e. URL of `<path-to-package>/images/fastn.svg`.

Now, you must be wondering how does it get two different value of image for
light mode and dark mode.


When using an `assets` variable, if an image with the same name but with
`-dark` suffix exists in the package, it will be used for the
`dark` field. For example, if `fastn-dark.svg` file exists in the `images`
folder, it will be used for the `dark` field, while `fastn.svg` will be used for
the light field.



-- ds.h2: Supported image formats

The HTML standard doesn't list what image formats to support, so
[user agents](https://developer.mozilla.org/en-US/docs/Glossary/User_agent) may
support different formats.

To get the comprehensive information about image formats and their web browser
support, check the [Image file type and format
guide](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types).














-- ds.h1: `ftd.resizing`

The `ftd.resizing` property is used to control the dimensions of an element. It
is an `or-type`. The `ftd.resizing` property is commonly used for component
properties such as `width`, `height`, `min-width`, `max-width`, `min-height` and
`max-height`.

-- ds.code: `ftd.resizing`
lang: ftd

\-- or-type resizing:

\-- constant string fill-container: fill-container
\-- constant string hug-content: hug-content
\-- constant string auto: auto
\-- ftd.length fixed:

\-- end: resizing

-- ds.markdown:

As shown above, the `ftd.resizing` has following variants:

- `fixed`: It gives fixed [length](built-in-types/#ftd-length) to element. For
  example, `width.fixed.px: 100` sets the width to be 100 pixels.

- `fixed`: The `fixed` variant of `ftd.resizing` is used to give a fixed
  [length](built-in-types/#ftd-length) to an element. For example,
  `width.fixed.px: 100` sets the width of an element to be 100 pixels. This
  variant is useful when a specific size is required for an element, regardless
  of the size of its parent or contents.

- `hug-content`:  The `hug-content` variant of `ftd.resizing` is used to
  dynamically resize the container element to be as small as possible while
  still surrounding its contents. This variant is useful when you want the size
  of the container element to match the size of its contents.

- `fill-container`: The `fill-container` variant of `ftd.resizing` is used to
  stretch the element to the width and/or height of its parent element. This
  variant is useful when you want an element to fill the entire space of its
  parent container.

- `auto`:  The `auto` variant of `ftd.resizing` allows the browser to calculate
  and select a width for the specified element. This variant is useful when you
  want the element to size itself automatically based on its contents or other
  factors.











;; Todo: -- ds.h1: `ftd.align-self`













-- ds.h1: `ftd.length`

The `ftd.length` type is used for passing UI dimensions and is an `or-type`,
meaning it can take on different variants.


-- ds.code: `ftd.length`
lang: ftd

\-- or-type length:

\-- integer px:
\-- decimal percent:
\-- string calc:
\-- integer vh:
\-- integer vw:
\-- decimal em:
\-- decimal rem:
\-- ftd.responsive-length responsive:

\-- end: length

\-- record responsive-length:
ftd.length desktop:
ftd.length mobile: $responsive-length.desktop

-- ds.markdown:

As shown above, the `ftd.length` has following variants:

- `px`: This variant gives an integer value followed by the px unit of space.
For example, `padding.px: 100` sets the padding to be 100 pixels.

- `percent`: This variant gives an integer value followed by the % unit of space.
For example, `width.fixed.percent: 50` sets the width to be 50% of the parent
element's width.

- `calc`: This variant takes a single expression as its parameter, and its
result is used as the value. For example, `padding.calc: 100% - 80px` sets the
padding to be the result of the expression `100% - 80px`.

- `vh`: This variant sets the value relative to 1% of the height of the viewport.
For example, `height.fixed.vh: 50` sets the height to be 50% of the viewport's
height.

- `vw`: This variant sets the value relative to 1% of the width of the viewport.
For example, `width.fixed.vw: 25` sets the width to be 25% of the viewport's
width.

- `em`: This variant sets the value relative to the size of the parent
element, in the case of typographical properties like `font-size`, and the font
size of the element itself, in the case of other properties like width.

- `rem`: This variant sets the value relative to the size of the root
element.


Besides these, there is a special variant named `responsive`.This variant is of
record type named `ftd.responsive-length`. It helps to give different length for
different devices (mobile/desktop). It has two fields, `desktop` and `mobile`,
which are `ftd.length` types. The `desktop` field specifies the value of the
length on desktop devices, while the `mobile` field specifies the value on
mobile devices.


For example,

-- ds.code: `responsive`
lang: ftd

\-- ftd.responsive-length p:
desktop.px: 20
mobile.percent: 10

\-- ftd.text: Hello
padding.responsive: $p


-- ds.markdown:

The above code sets the padding to be 20 pixels on desktop devices and 10
percent on mobile devices.

Note that the `calc` variant can be used with any of the other variants to
perform calculations on the values.

-- ds.h2: Example Usage of `ftd.length`

-- ds.code: Example Usage of `ftd.length`
lang: ftd

\-- ftd.text: Hello
width.fixed.percent: 50
height.fixed.px: 300
margin.px: 2rem
padding.calc: 100% - 80px

-- ds.markdown:

In the above example, the `ftd.text` component has a width of 50% of its parent
element's width, a fixed height of 300 pixels, a margin of 2 times the font size
of the root element, and a padding calculated using the expression 100% - 80px.





-- ds.h1: `ftd.type`

It defines the typography of the font. It is record with the following fields.

-- ds.code: `type` record (ftd.ftd)
lang: ftd

\-- record type:
optional ftd.font-size size:
optional ftd.font-size line-height:
optional ftd.font-size letter-spacing:
optional integer weight:
optional string font-family:

-- ds.markdown:

It defines the line-height, size, weight, font-family and letter-spacing.

-- ds.h2: `line-height`

The `line-height` field sets the height of a line box. It's commonly
used to set the distance between lines of text.

-- ds.h2: `size`

The `size` field sets the size of the font.

-- ds.h2: `weight`

The `weight` property sets the weight (or boldness) of the font. The
weights available depend on the `font-family` that is currently set.

-- ds.h2: `font-family`

The `font-family` property specifies a font family name and/or generic family
name for the selected element.

-- ds.h2: `letter-spacing`

The `letter-spacing` sets the horizontal spacing behavior between text
characters. This value is added to the natural spacing between characters
while rendering the text. Positive values of letter-spacing causes
characters to spread farther apart, while negative values of letter-spacing
bring characters closer together.

-- ds.code:
lang: ftd

\-- ftd.type dtype:
size.px: 40
weight: 700
font-family: cursive
line-height.px: 65
letter-spacing.px: 5





-- ds.h1: `ftd.loading`

`ftd.loading` is a or-type. This is the type for `loading` property of
`ftd.iframe` component. It is a strategy to identify whether resources are
blocking and load these immediately or non-blocking (non-critical) and load
these only when needed.

-- ds.code: `ftd.loading`
lang: ftd

\-- or-type loading:

\-- constant string lazy: lazy
\-- constant string eager: eager

\-- end: loading


-- ds.markdown:

It has two variants `lazy` and `eager`.

- `eager`: Loads an element immediately
- `lazy`: Defer loading of element until some conditions are met






-- ds.h1: `ftd.text-input-type`

`ftd.text-input-type` is an `or-type`. The 'type' property of `ftd.text-input`
component accepts the `optional` of this type. It has various variant which
defines information field type.

-- ds.code: `ftd.text-input-type`
lang: ftd

\-- or-type text-input-type:

\-- constant string text: text
\-- constant string email: email
\-- constant string password: password
\-- constant string url: url

\-- end: text-input-type

-- ds.markdown:

As you can see above the `ftd.text-input-type` has following variants:

- **text**: The default value. A single-line text field. Line-breaks are
automatically removed from the input value.

- **email**: A field for editing an email address. Looks like a `text` input,
but has validation parameters and relevant keyboard in supporting browsers and
devices with dynamic keyboards.

- **password**: A single-line text field whose value is obscured. Will alert
user if site is not secure.

- **url**: A field for entering a URL. Looks like a `text` input, but has
validation parameters and relevant keyboard in supporting browsers and devices
with dynamic keyboards.













/-- ds.h1: `ftd.type`

It defines the typography of the font.

It is record type with the following fields.

/-- ds.code: `ftd.type` record (ftd.ftd)
lang: ftd

\-- record type:
string font:
ftd.font-size desktop:
ftd.font-size mobile:
ftd.font-size xl:
integer weight:
optional string style:


/-- ds.markdown:

It defines the:

- `font`: A prioritized list of one or more font family
  names and/or generic family names for the selected element.
- `desktop`, `mobile` and `xl`: These are of `ftd.font-size` type. These
  are responsive. So only one of these will be applicable depending on device.
- `weight`: The weight (or boldness) of the font.
- `style`: The appearance of decorative lines on text or styling of font. It is
  an optional field. It takes the following values: `italic`, `underline` and
  `strike`. More than one of these values can be using space separation.
  Example: `style: italic underline`


/-- ds.code:
lang: ftd

\-- ftd.font-size desktop-fs:
line-height: 30
size: 24
letter-spacing: 0

\-- ftd.font-size mobile-fs:
line-height: 20
size: 16
letter-spacing: 0

\-- ftd.font-size xl-fs:
line-height: 50
size: 46
letter-spacing: 0

\-- ftd.type font-type:
font: serif
desktop: $desktop-fs
mobile: $mobile-fs
xl: $xl-fs
weight: 400
style: italic


/-- ds.h1: `length`

`length` is a type that is used for passing UI dimensions. It has one of the

`length` accepts following set of string:

- `fill`: This gives 100% space
- `auto`: This gives auto space (read more about it in `auto` css property value)
- `calc <some-value>`: It takes a single expression as its parameter, with the
   expression's result used as the value. Example: `width: calc 100% - 80px`
- `fit-content`: the element will use the available space, but never more than max-content.
   Example: `width: fit-content`
- `portion <integer>`: It specifies how much the item will grow relative to the
   rest of the items inside the same container.
- `percent <integer>`: This gives <integer>% space
- `vh <integer>`: Relative to 1% of the height of the viewport
- `vw <integer>`: Relative to 1% of the width of the viewport
- `<integer>`: Gives <integer>px unit space.

;; Todo: Add all types from cheatsheet

-- end: my-ds.page


-- ftd.color red-orange:
light: red
dark: orange

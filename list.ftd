/-- ft-core.concept:

-- my-ds.page: `list`

-- ds.markdown: 

`list` keyword can be used to create a list or an array in `ftd`.

-- ds.h1: Declaring a `list`

-- ds.code: a list of integer
lang: ftd

\-- integer list primes:

-- ds.markdown:

Here we have declared a new variable called `primes`, which is a `list` of
`integer`s. When the list is created it is empty.

`Note`: By default, lists are `immutable`. The user can make the list `mutable`
by prefixing it with `$` like this `-- integer list $primes:`

-- ds.h1: Initializing values to a list

We can add elements to the list during initialization
by mentioning the `list-type` like this:

`-- <list-type>: <value>`.

`Note`: Also make sure to use the end syntax `-- end: <list-name>` to mark
the end of the list during initialization.

-- ds.code:
lang: ftd

\-- integer list primes:

\-- integer: 1
\-- integer: 3
\-- integer: 5
\-- integer: 7
\-- integer: 11

\-- end: primes

-- ds.markdown:

We have inserted 5 `integers` to our `list` named `primes`.

-- ds.code:
lang: ftd

\-- record person:
caption name:
body bio:

\-- person list people:

\-- person: Amit Upadhyay

Amit is CEO of FifthTry.

\-- person: Shobhit Sharma

Shobhit is a developer at FifthTry.

\-- end: people

-- ds.markdown:

Here we have created a `list` of `person` objects, called it `people`, and
created two `person` objects and inserted them the `people` list.

-- ds.h1: `$processor$`

A list can be created using platform provided processors:

-- ds.code:
lang: ftd

\-- string list foo:
$processor$: some-list

-- ds.markdown:

Here the value of the list will be provided by the `some-list` processor.

If we already have a list we can insert values to it using `$processor$` as well:

-- ds.code:
lang: ftd

\-- string list foo:

\-- foo:
$processor$: some-list

-- ds.h1: Reading A `list` from Rust

You can use the `.get()` method to read a `list`:

-- ds.code:
lang: rs

#[derive(serde::Deserialize)]
struct Person {
    name: String,
    bio: String,
}

let doc = ftd::p2::Document::from("some/id", source, lib)?;
let people: Vec<Person> = doc.get("people")?;

-- ds.markdown:

You can read more details of reading `ftd` files ["Reading FTD Files"](/reading-data/)
guide.


-- end: my-ds.page

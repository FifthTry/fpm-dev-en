;;-- import: fpm.dev/lib
-- import: fifthtry.github.io/bling/tip
-- import: fifthtry.github.io/admonitions as cbox





-- ds.page: `fpm package` File System Organization

-- ds.h1: Package

`fpm` organizes [`ftd`](https://ftd.dev) files in "packages". Any folder is a
`fpm package` if it contains a valid `FPM.ftd` file.

-- ds.h1: `FPM.ftd`

Every package folder has a file [`FPM.ftd`](/fpm-ftd-file/).

-- ds.h2: Package Name

Each package has a name. The name of the package can be either just `foo.com` or
`foo.com/bar`. The former is usually the "account name", eg the username or the org
that owns that package, and the latter is a namespace package.

-- cbox.tip: Package Name

The name of package should be a valid URL (without the protocol part, we always
assume `https`).

-- ds.h1: `.build` folder

`fpm` can be used as a static site generator, [`fpm build`](/build/) will
convert all `ftd`, `markdown` files to `html` and store them in `.build` folder.

If you are using static site hosting solution, eg Github Pages, Vercel,
Cloudflare Pages etc, the content of `.build` folder has to be uploaded to your
static site host.

-- tip.tip: `.build` Is Ignore-able Folder

`.build` folder should be added to `.gitignore` if you are storing fpm package
in a git repository.

-- ds.h1: `.packages` folder

If the package has a dependency on another package, the dependencies are
downloaded and stored in `.packages` folder.

-- cbox.tip: `.packages` Is Ignore-able Folder

`.packages` folder should also be added to `.gitignore`.

-- ds.h1: `.packages/<package-name.ftd>` file

When a fpm package is translated, a source package needs information about all
the translation packages, to show on the translation status page. But we do not
need the entire content of the translation packages.

To avoid downloading entire package, we just download the `FPM.ftd` for the
translation packages in this case.

-- ds.h1: `.history` folder

`fpm` is also a version control system and can be used instead of say `git`.
History of all edits are kept in `history tracking`, and creates a snapshot of
every file that is modified in `.history` folder.

You can create a new history snapshot by using `fpm sync`.

If this package uses `fpm` as the respository, `.history` folder is managed by
the `fpm server`. If the package is stored in `git` repository, then `fpm sync`
creates local snapshots.

/-- lib.ganesh: But amitu!
/-- lib.ganesh: Why Do We Need `.history` When We Using `git`?
/-- lib.amitu: `fpm` supports translation and ad-hoc tracking features.

/-- lib.amitu:

These features require support for accessing historical versions of files.

/-- lib.amitu:

Currently they are powered by snapshots stored in the `.history` folder.

-- ds.h1: `.history/.latest.ftd` file

This file keeps track of latest timestamp of all files in `.history` folder. It
looks like this:

-- ds.code:
lang: ftd

\-- import: fpm

\-- fpm.snapshot: FPM.ftd
timestamp: 1646494343706523000

\-- fpm.snapshot: foo/index.ftd
timestamp: 1638625721072234000

-- end: ds.page
-- import: ftd.dev/workshop

-- ds.page: Records
id: ws-records


-- ds.markdown:

Till now we dealt with basic types like [booleans](id: ws-booleans), [numbers
and strings](id: ws-numbers-and-strings). Now we are moving to more interesting
stuff: `record`.


-- boolean $what-are-records-understood: false

-- object what-are-records-object:
function: ls.set-boolean
variable: $what-are-records-understood

-- workshop.understood what-are-records-button:
$on-click$: toggle $what-are-records-understood
$on-click$: message-host $what-are-records-object

-- workshop.lesson: What Are Records?
$understood: $what-are-records-understood
button: what-are-records-button:


Records are like classes or structs in some language. Record contains one or
more fields.

An example record looks like this:

-- ds.code: defining a record called `person`
lang: ftd

\-- record person:
string name:
integer age:

-- ds.markdown:

And to create an instance of the record we use:

-- ds.code: creating a variable `john` of type `person`
lang: ftd

\-- person john:
name: John
age: 20


-- container: ws-records


-- ds.h1: Task 1: Define and Use A Record

Open [records.ftd](https://github.com/ftd-lang/ftd-workshop/blob/main/01-data/04-records/records.ftd)
and define your first record and then an instance of it.

-- ds.h1: Special Types: `caption` and `body`

We take a lot of pride in read-ablity and neatness of our code, so we have
created the types `caption` and `body`, both of which are aliases for `string`
type, but they also govern where the value should written. Best demonstrated
using and example:

-- ds.code: record with `caption` and `body`
lang: ftd

\-- record person:
caption name:
integer age:
body bio:

\-- person john: John Doe
age: 20

John Doe is the best of Johns, but the worst of Does.

Hindi people think he has something to do with the "desh ke liye".
Punjabi people consider him the patron saint of forging mistakes.

-- ds.markdown:

Notice we have not used the `name` and `bio` fields as "headers", like we have
done for `age`. The `name`'s type is `caption` so it appears in the "caption"
position of the section, and `bio` appears as "body" and is suitable for
multi-line texts.

Note: {ds.highlight: you can only have single caption and single body types in
a record}. If you want to have more than one multi-line field for a record, you
can either use a local string variable, or wait for 0.3 syntax to be ready.

-- ds.h1: Task 2: Caption And Body Types

Fix the mistakes in [caption-and-body.ftd](https://github.com/ftd-lang/ftd-workshop/blob/main/01-data/04-records/caption-and-body.ftd).


-- ds.h1: Default Values For Fields

Record fields can have default values, eg:

-- ds.code:
lang: ftd

\-- record person:
caption name:
integer age: 18
body bio:


-- ds.markdown:

Here we have specified `18` as `age`. When creating a variable of type person
we can leave off age now:

-- ds.code:
lang: ftd

\-- person john: John Lee

Elder brother of the notorious Bache Qui.

-- ds.h1: Task: Use Default Values

Fix the mistakes in [default.ftd](https://github.com/ftd-lang/ftd-workshop/blob/main/01-data/04-records/default.ftd).

-- ds.h1: Default of a field can be another field

The default value of a field can be set to another field as well:

-- ds.code:
lang: ftd

\-- record person:
caption name:
string nick-name: $name
integer age: 18
body bio:

-- ds.markdown:

Here we have specified an optional (because it has a default value) `nick-name`.
If you leave out the `nick-name`, the `name` would be used as the `nick-name`.

-- ds.h1: Task: Fix

-- ds.h1: Move To Next Chapter

-- ds.markdown:

You have learnt about how to create record and make authoring records more
author friendly using caption and body types.

You can move on to [lists](../06-lists/) now, or go back to the [list of
steps](id: workshop).




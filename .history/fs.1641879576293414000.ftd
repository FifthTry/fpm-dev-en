

-- ft.doc-page:
toc: $ft.toc


-- ft.h0: File System Organization


-- ft.h1: Package

FASTN organizes [`ftd`](https://ftd.dev) files in "packages".


-- ft.h2: Package Name

Each package has a name. The name of the package can be either just `foo` or
`foo/bar`. The former is usually the "account name", eg the username or the org
that owns that package, and the latter is a namespace package.


-- ft.h1: `FASTN Home`

It is common for people to work on more than one package at a time. In Git, every
repo is checked on a folder on its own, with no relationship between folders
corresponding to different git repos.

Documents in FASTN package can refer to other FASTN packages. So if you are working
on both packages `amitu` and `amitu/realm` for example, it is handy to checkout
`amitu` in a folder named `amitu` and the package `amitu/realm` in `amitu/realm`.

All packages in FASTN should be checked out in "fastn home" folder. You can have more
than one `fastn home` if you so desire for whatever reason.


-- ft.h2: `fastn home` discovery

`fastn` tool expects the `.fastn.ftd` in a `fastn home`, and traverses up the folder
tree till it finds it, that folder is called `fastn home`.

Note: `fastn home` is optional. If `.fastn.ftd` file is not found in the expected
location it is assumed that the package is in standalone mode.


-- ft.h1: Package Folder

A package with name `x/y` is check-out/expected to be in `$FASTN_HOME/x/y`.


-- ft.h2: `FASTN.ftd`

Every package folder has a file [`FASTN.ftd`](/fastn/FASTN/).


-- ft.h2: `.build` dir

When a package is built using `fastn build`, the generated `.html` etc files are
stored in `.build` folder in the package root, next to `FASTN.ftd` file.

If you are using static site hosting solution, eg Github Pages, Vercel,
Cloudflare Pages etc, the content of `.build` folder has to be uploaded to your
static site host.


-- ft.h2: `.packages` dir

If the package has a dependency on another package, the dependencies are downloaded
and stored in `.packages` folder.


-- ft.h2: `.history` dir

FASTN implements `history tracking`, and creates a snapshot of every file that is
modified in `.history` folder.

You can create a new history snapshot by using `fastn sync`. If this package uses
`fastn-repo`, content of local system would be synced and history snapshots would be
created on `fastn-repo` server. If other repo like `github` etc are being used, then
all files that have changed in package directory that have changed since last
`sync` will be stored in the `.history` folder.


-- ft.h2: `.history/.latest.ftd` file

This file keeps track of latest timestamp of all files in `.history` folder. It
looks like this:


-- ft.code:
lang: ftd

\-- import: fastn

\-- fastn.snapshot: FASTN.ftd
timestamp: 1638625721072234000

\-- fastn.snapshot: foo/index.ftd
timestamp: 1638625721072234000

-- import: fifthtry/ft


-- ft.h0: Built-in Types

`ftd` comes with some built-in types. These types can be used to construct more
complex types like [`record`](/fifthtry/ftd/record/) and 
[`or-type`](/fifthtry/ftd/or-type/).


-- ft.h1: `boolean`

This type is used to represent boolean values `true` and `false`.


-- ft.code:
lang: ftd

\-- var is-monday: true
type: boolean


-- ft.markdown:

This type can be "auto-detected" so it's not necessary to specify the type when
declaring a boolean variable.


-- ft.h1: `integer`

This is integer type, can be positive or negative.


-- ft.code:
lang: ftd

\-- var number-of-days-in-a-week: 7
type: integer


-- ft.markdown:

This type can be "auto-detected" so it's not necessary to specify the type when
declaring an integer variable.


-- ft.h1: `decimal`

This type is used to represent decimal numbers.


-- ft.code:
lang: ftd

\-- var pi: 3.14159
type: decimal


-- ft.markdown:

This type can be "auto-detected" so it's not necessary to specify the type when
declaring a decimal variable.


-- ft.h1: `string`

This is unicode string.


-- ft.code:
lang: ftd

\-- var message: hello world!
type: string


-- ft.code: a multi-line string (type is optional for `string`)
lang: ftd

\-- var message:

this is a multiline string.

can have any number of lines.

or long paragraph, if you have a long paragraph to write. it can 
contain unicode characters in any ‡§≠‡§æ‡§∑‡§æ, or emojis, üíÅüëåüéçüòç.


-- ft.markdown:

This type can be "auto-detected" so it's not necessary to specify the type when
declaring an string variable.


-- ft.h1: `caption`

`caption` is a special type, it is an alias for `string`, but can not be used when
declaring a variable.

This type is used for `record`, `or-type` and `component` arguments.

If a `record` or `or-type` field, or `component` argument is defined as `caption`,
it can be passed in the "caption" location in `ftd::p1` "section".


-- ft.code: record with caption
lang: ftd

\-- record person:
name: caption

\-- var amitu: Amit Upadhyay
type: person

\-- var shobhit:
type: person
name: Shobhit Sharma


-- ft.markdown:

If something is specified as `caption`, it can come in the "caption" location, eg 
in case of `amitu` var, or it can come as an explicit key, as in the declaration 
of `shobhit` variable.


-- ft.h1: `body`

`body` is a special type, it is an alias for `string`, but can not be used when
declaring a variable.

This type is used for `record`, `or-type` and `component` arguments.

If a `record` or `or-type` field, or `component` argument is defined as `body`,
it can be passed in the "body" location in `ftd::p1` "section".


-- ft.code: record with body
lang: ftd

\-- record person:
name: caption
bio: body

\-- var amitu: Amit Upadhyay
type: person

this is single 

or multi-line bio of Amit.

\-- var shobhit:
type: person
name: Shobhit Sharma
bio: or we can put things in "header"


-- ft.markdown:

If something is specified as `body`, it can come in the "body" location, eg in
case of `amitu` var, or it can come as an explicit key, as in the declaration of
`shobhit` variable.


-- ft.h1: `caption or body`

`caption or body` is a special type, it is an alias for `string`, but can not be 
used when declaring a variable.

This type is used for `record`, `or-type` and `component` arguments.

If a `record` or `or-type` field, or `component` argument is defined as `caption 
or body`, it can be passed in either the "caption" or "body" location in 
`ftd::p1` "section".


-- ft.code: record with caption or body
lang: ftd

\-- record person:
name: caption or body

\-- var amitu: Amit Upadhyay
type: person


\-- var shobhit:
type: person
name: Shobhit Sharma

\-- var abrar:
type: person

Abrar Khan


-- ft.markdown:

If something is specified as `caption or body`, it can come in the "caption" 
location, eg in case of `amitu` var, or it can come as an explicit key, as in 
the declaration of `shobhit` variable, or in "body" location, eg for `abrar`.
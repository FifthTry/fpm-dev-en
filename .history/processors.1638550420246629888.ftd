


-- ft.page:


-- ft.h0: Available `$processor$`s

FASTN comes with following built in processors.


-- ft.h1: `toc`

This is "table of content processor". It has the following data type:


-- ft.code:
lang: ftd

\-- record toc-item:
caption title:
string url:
toc-item list children:


-- ft.markdown:

You can use it like this:


-- ft.code:
lang: ftd

\-- toc-item list toc:

\-- toc:
$processor$: toc

- https://google.com
  Google
- /some/url/
  Some URL
  - /some/nested/page/
    Supports Nesting as Well


-- ft.markdown:

`toc` is used for creating optionally nested table of content data. Usually it is
used to succinctly describe links in nav bars or creating table of content.

Each link starts with a dash (`-`) followed by a space and then the URL, and the
title of link comes in next line aligned with the start of URL.

For nesting we can indent both lines by two spaces. Any amount of nesting is 
possible.

Currently the parser is strict, rules must be followed exactly.


-- ft.h1: `http`

This processor is used to initialise some FTD variable with content of JSON fetched
from HTTP.

Consider this data type:


-- ft.code:
lang: ftd

\-- record repo:
string full_name:
string description:
string html_url:
integer stargazers_count:
integer watchers_count:

\-- record result:
integer total_count: 0
repo list items:

\-- result r:


-- ft.markdown:

We have two records: `repo`, and `result`. We also have a variable of type `result`.

Lets initialise this variable with result of fetching the top repositories from 
Github:


-- ft.code:
lang: ftd

\-- r:
$processor$: http
url: https://api.github.com/search/repositories
sort: stars
order: desc
q: language:python


-- ft.h2: `url: string`

This is the URL where we would be fetching the JSON from. It is mandatory.


-- ft.h2: Key: Value pairs

Each key value pair is passed added to the URL as query params. 

The response of the JSON must match with type of the variable where we are storing
the result, here it is `r` of type `record` defined above.
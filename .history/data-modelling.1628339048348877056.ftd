-- import: fifthtry/ft


-- ft.h0: Data Modelling With `ftd`

`ftd` is an alternative to XML/JSON for storing data.


-- ft.h1: Optimized For Human Readability

`ftd` is designed for humans to write data. It tries tries to be a minimal
as possible, intuitive and readable, no quote character for strings, avoid 
indentation etc.


-- ft.code: ftd file containing data
lang: ftd

\-- record person: 
name: caption
location: string
bio: optional body

\-- var amitu: Amit Upadhyay
type: person
location: Banglore, India

Amit is the founder and CEO of FifthTry.


-- ft.markdown:

Consider this example. We have described our data, `person`, and notice we have
type for each field. Notice also our types `caption`, which like "heading of the 
data", `body`, which lets people write multiline strings without worrying about
quoting or indentation etc.

Read our [`ftd::p1` grammar guide](/fifthtry/ftd/p1-grammar/) to understand the low 
level grammer better.


-- ft.h1: Rich Data Modelling

It has support for [typed variables](/fifthtry/ftd/variables/),
[`records`](/fifthtry/ftd/record/) (`struct` in other languages), 
[`or-type`](/fifthtry/ftd/or-type/) (`enum` in Rust, also called "algebraic data 
type") and [lists](/fifthtry/ftd/list/). 

FTD files can be validated to confirm to strict type or not, and this can be used
by editors to assist humans write correct ftd files.


-- ft.h1: Reading FTD Files

Programs can read ftd files:


-- ft.code:
lang: rs

#[derive(serde::Deserialize)]
struct Employee {
    name: String,
    location: String,
    bio: Option<String>
}

let doc = ftd::p2::Document::from("some/id", source, lib)?;
let amitu: Employee = doc.get("amitu")?;


-- ft.markdown:

Read more about it in ["reading data" guide](/fifthtry/ftd/reading-data/).


-- ft.h1: Better Organization Of Data

`ftd` also supports referring to other `ftd` files, so one can describe the schema
or data in one file and refer it from other files.
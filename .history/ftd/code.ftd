-- my-ds.page: Code

-- ds.markdown:

It renders the code component.

-- ds.code:
lang: ftd

\-- ftd.code:

print("hello world")

-- ds.output:

-- ftd.code:

print("hello world")

-- ds.markdown:

The `ftd.code` component accepts the below attributes along with the
[common attributes](common/).


-- ds.h1: `text: String`

This is the text or code to show. It accepts the value both in caption
or body besides in header.

-- ds.code:
lang: ftd

\-- ftd.code:
text: print("hello world")

-- ds.output:

-- ftd.code:
text: print("hello world")


-- ds.h1: `lang: String`

The `lang` property defines the language of the code. It is an
optional field. In case if the value is not provided, this
will take `txt` as default value.

-- ds.code:
lang: ftd

\-- ftd.code:
lang: py

value = "hello world"
print(value)

-- ds.output:

-- ftd.code:
lang: py

value = "hello world"
print(value)


-- ds.h1: `theme: String`

The `theme` property defines the theme for the code block.
It is an optional field with default value `base16-ocean.dark`.

The available themes are:

- base16-ocean.dark
- base16-eighties.dark
- base16-mocha.dark
- base16-ocean.light
- InspiredGitHub
- Solarized (dark)
- Solarized (light)

Refer [this](https://docs.rs/syntect/latest/syntect/highlighting/struct.ThemeSet.html#method.load_defaults)
for the list of themes available

-- ds.code:
lang: ftd

\-- ftd.code:
lang: py
theme: Solarized (dark)

value = "hello world"
print(value)

-- ds.output:

-- ftd.code:
lang: py
theme: Solarized (dark)

value = "hello world"
print(value)


-- ds.h1: `role: ftd.type`

It defines the font typography.
Refer [built-in types](built-in-types/#ftd-type) for more detail

-- ds.code:
lang: ftd

\-- ftd.code:
lang: py
role: $font-type

value = "hello world"
print(value)

-- ds.output:

-- ds.code:
lang: ftd

\-- ftd.font-size desktop-fs:
line-height: 30
size: 24
letter-spacing: 0

\-- ftd.font-size mobile-fs:
line-height: 20
size: 16
letter-spacing: 0

\-- ftd.font-size xl-fs:
line-height: 50
size: 46
letter-spacing: 0

\-- ftd.type font-type:
font: serif
desktop: $desktop-fs
mobile: $mobile-fs
xl: $xl-fs
weight: 400
style: italic

-- ds.code:
lang: py

value = "hello world"
print(value)


-- ds.h1: `line-clamp: Integer`

The `line-clamp` property allows limiting of the contents to the specified number of lines.

-- ds.code:
lang: ftd

\-- ftd.code:
lang: py

value = "hello world"
print(value)

-- ds.output:


-- ds.code:
lang: py

value = "hello world"
print(value)


-- ds.h1: `text-align: String`

The `text-align` property sets the horizontal alignment of the content.
It accepts the following values:

- center
- left
- right
- justify

-- ds.h2: `center`

The inline contents are centered within the line box.

-- ds.code:
lang: ftd

\-- ftd.code:
lang: py
width: 400
text-align: center

value = "hello world"
print(value)

-- ds.output:


-- ds.code:
lang: py

value = "hello world"
print(value)

-- ds.h2: `left`

The inline contents are aligned to the left edge of the line box.

-- ds.code:
lang: ftd

\-- ftd.code:
lang: py
width: 400
text-align: left

value = "hello world"
print(value)

-- ds.output:


-- ds.code:
lang: py

value = "hello world"
print(value)


-- ds.h2: `right`

The inline contents are aligned to the right edge of the line box.

-- ds.code:
lang: ftd

\-- ftd.code:
lang: py
width: 400
text-align: right

value = "hello world"
print(value)

-- ds.output:


-- ds.code:
lang: py

value = "hello world"
print(value)

-- ds.h2: `justify`

The inline contents are justified. Text should be spaced to line up
its left and right edges to the left and right edges of the line box,
except for the last line.

-- ds.code:
lang: ftd

\-- ftd.code:
lang: py
width: 400
text-align: justify

value = "hello world"
print(value)

-- ds.output:


-- ds.code:
lang: py

value = "hello world"
print(value)


-- end: my-ds.page

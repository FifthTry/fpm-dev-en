-- import: fifthtry/ft


-- ft.h0: `ftd::p1` grammar

`ftd` is based on a low-level grammar called `ftd::p1` grammar.


-- ft.h1: `section`

A `ftd::p1` file is composed of "sections". A section looks like this:


-- ft.code: an `ftd::p1` file with two sections
lang: ftd

\-- some section: the caption of the section
header-1: some header value
hello: world

the body of the first section

\-- something:
yo: 42


-- ft.markdown:

Each section starts with `-- `. 

The section has these properties:


-- ft.h2: `section name`

The section name is the only **mandatory parameter** for a section. Name starts 
after `-- `, and ends with the first `:`. Trailing `:` is mandatory.

In our example, the name of the first section is `some section`, and the second 
section's name is `something`.

Section name contains alphanumeric characters, underscores, space, dots(`.`), 
hash(`#`), and hyphens(`-`). Colon terminates the section name.

Leading and trailing whitespaces are not considered part of the section name.


-- ft.h2: `section caption`

What comes after `:` in the section line, till the end of the first line is called
the `caption` of the section.

The `caption` is optional.

In our example, the first section's caption is "the caption of the section", and 
the second section does not have a caption.

Leading and trailing whitespaces are not considered part of the caption.


-- ft.h2: `section headers`

After the "section line" (the first line that starts with `-- `, zero or more
section headers can be passed. In our example, the first section has two headers,
`header-1` and `hello`, with values `some header value` and `world` respectively.

An empty newline or the start of a new section (or `sub-section` described below) 
marks the end of the headers.

Leading and trailing whitespaces of both header name and header value are ignored.


-- ft.h2: `section body`

After the first empty line that comes after the section header, till the start
of next section (or `sub-section`) is considered the body of the section.

The body is optional.

Leading and trailing newlines are not considered part of the body.


-- ft.h1: `sub-section`

A section can contain zero or more `sub-sections`:


-- ft.code:
lang: ftd

\-- some-section:

optional body of "some-section"

\--- sub-section-1: yo yo
sub-section-header-1: 111

\--- lalala:

this one has a body


-- ft.markdown:

`sub-section` starts with `--- `. If `section` has `body`, body comes before any
of the `sub-section`s.

The sub-section has exactly the same properties as a section, `sub-section name`, 
optional `caption`, zero or more headers, and an optional body.

In our example, `some-section` `section` has two `sub-section`s, with names 
`sub-section-1` and `lalala` respectively. The first one has a caption, `yo yo`, 
and the second doesn't. First `sub-section-1` has one header, and no body, `lalala`
has no header but has a body: `this one has a body`.


-- ft.h1: Philosophy, and why there is no `sub-sub-section`

Markdown is brilliant, very soon probably every text input where humans write free
form text will be supporting markdown or a subset of it. 

But markdown fails at:

1. capturing data ([frontmatter](https://jekyllrb.com/docs/front-matter/) 
   is a cop-out, forces yml, which may not be something all humans will be able to 
   learn) and, 
2. more complex UI (in an attempt to chase simplicity, it is too simple).

On the other hand, data files like JSON/XML/ini,TOML etc are either not suitable
for writing free form text, or have too much syntax.

If the vision is for every human to own their data, one must ask, data in what 
format? XML? JSON? YML? Markdown? FTD hopes to be that format.

Most data that people have (barring the binary data like media files, and such), 
most people have data that can either be roughly represented by a simple JSON like
language, or by a markdown-like language.

FTD aims to be that combination.

While the `ftd::p1` grammar only allows for only `string`s, `ftd` is [strongly
typed](/fifthtry/ftd/data-modelling/), with a type system hopefully superior to 
many programming languages (we have [ADT](/fifthtry/ftd/or-type/)!).


-- ft.h2: Simple Syntax

If our goal is for all humans to learn some syntax, it must be very simple.

With these in mind, we have a syntax that only has `-`, `:` (and `\`) as special 
characters. There is no `(`, or `[`, or `{`, or even `"` etc etc.


-- ft.h2: Indentation And Closing Tags

If our goal is to the universal data format, which can be inputted in any text
field humans come across, we can not rely on advanced editor features.

Working with indentation-based grammar is very hard if an indentation-aware editor 
is not used. You need an editor that is able to indent and un-indent blocks of 
text.

Closing tags or brackets/braces etc are even worse: they require indentation 
anyways, but they also force user to keep track of matching special characters,
which is a common stumbling block for programmers that many attempts in 
programming language world has been made to get rid of them (Python, one of the
most successful programming languages used "getting rid of closing tags/brackets"
as one of the selling points, at least in the beginning).


-- ft.h2: Heirarichal data and flat structure

This forces us to represent data and UI, both of them are inherently hierarchal 
in nature, in a flat format. This is possible to some extent, as we explore with
the design of `ftd`.

Read how we do ["container management"](/fifthtry/ftd/container/) to attempt this.

What we are trying is very hard. We will have to make compromises somewhere.


-- ft.h1: Programmatic Access

`ftd::p1` module in `ftd` crate can be used to read `ftd.p1` files. Wrappers of
this crate in Python and other programming languages would hopefully come soon.


-- ft.h2: File Extension

Each user of `ftd::p1` should come up with their own extension, but `.p1` is an
extension which can be used by convention in some cases.

Also consider using `ftd` itself, instead of this low-level library, this library 
should only be used as a fallback.
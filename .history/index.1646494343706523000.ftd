-- ft.page:
id: main-page


-- ft.create-section:

--- ft.h2: Create

--- ft.template-list:

--- ft.template: An Online Book
link: /new/book/
image: -/fastn.dev/images/document.png
active: true
cta-text: Select Theme

--- ft.template: An Open Source Project Site
link: /new/open-source/
image: -/fastn.dev/images/open-source.png
active: true
cta-text: Select Theme

--- ft.template: A Presentation
link: /new/presentation/
image: -/fastn.dev/images/giggle.png
active: true
cta-text: Select Theme

--- ft.template: A Diagram
image: -/fastn.dev/images/no-data.jpg
active: false
cta-text: Coming Soon


-- ft.content:

-- ft.h1: fastn: FTD Package Manager & Static Site Generator

FASTN is a command line tool written in Rust that acts as both package manager for
[FTD](https://ftd.dev/) programs as well as static site generator that converts
`.ftd` files to `.html` files you can ship on [Github Pages](/how-to/get-started-github-pages/),
[Vercel](/how-to/get-started-vercel/) etc.

-- ft.h2: FASTN.ftd

To convert a folder contianing `ftd` files, create a `FASTN.ftd` file:

-- ft.code:
lang: ftd

\-- import: fastn

\-- fastn.package: fastn.dev
zip: github.com/fifthtry/fastn.dev/archive/refs/heads/main.zip

-- ft.markdown:

We have created a package named `fastn.dev`. Packages in FASTN are named after the
domain where they would be published. {ft.highlight: Every FASTN package is a website.}

-- ft.h2: Distributed Package Manager

Unlike other package managers like pypi, npm and crates, there is no central
package repository in FASTN. Since every FASTN package is a website, that website
acts as the package repository.

-- ft.h2: Dependencies

FASTN support package dependencies. To add a dependency add it in `FASTN.ftd` file:

-- ft.code:
lang: ftd

\-- import: fastn

\-- fastn.package: fastn.dev
zip: github.com/fifthtry/fastn.dev/archive/refs/heads/main.zip

\-- fastn.dependency: fifthtry.github.io/Forest-Theme as ft

-- ft.markdown:

Here `fastn.dev` has a dependency on [`fifthtry.github.io/Forest-Theme`](https://fifthtry.github.io/Forest-Theme).

We have also used "alias" feature to bind the name of this dependency to `ft`,
so FTD files can write `-- import: ft` instead of `-- import:
fifthtry.github.io/Forest-Theme`.

-- ft.h2: Fungible Themes - Package Interface

An FASTN package contains one or more "ftd modules", and the modules export one or
more "symbols", eg [records](https://ftd.dev/record/),
[variables](https://ftd.dev/variables/), [components](https://ftd.dev/component/)
and so on.

The set of modules and symbols exported by a package is called "package
interface" of that package. FASTN lets one package declare that it is
"implementing" another package. All packages that implement a common package
are interchangeable without chaning any code, and only updating the dependency
in `FASTN.ftd` file.

This allows for component libraries and themes to be easily interchangeable. So
if you use any component, say a event schedule bar, dark mode switcher, etc, you
know you can easily find other packages that are compatible with those packages
and switch to those components easily.

-- ft.h2: Translation Tracking

FASTN has a unique translation tracking feature. An FASTN package can declare it can
be translated by adding a language key:

-- ft.code:
lang: ftd

\-- import: fastn

\-- fastn.package: fastn.dev
zip: github.com/fifthtry/fastn.dev/archive/refs/heads/main.zip
language: English
translation: hi.fastn.dev

-- ft.markdown:

Here we have declared that this package supports translation by adding the
language key. Also we have already got one "accepted translation",
[`hi.fastn.dev`](https://hi.fastn.dev).

Once you have enabled translation, you can create a new fastn package, here
`hi.fastn.dev`, and give it a FASTN.ftd file:

-- ft.code:
lang: ftd

\-- import: fastn

\-- fastn.package: hi.fastn.dev
zip: github.com/fifthtry/fastn.dev-hi/archive/refs/heads/main.zip
language: hi
translation-of: fastn.dev

-- ft.markdown:

This can be your entire package when you create a new translation. When you
build a translated FASTN package, FASTN is aware it is a translation, and it builds
all the files in the original, which if `fastn.dev`, so you do not have to copy
any files.

FASTN uses a fallback based logic, for every missing file, it builds the
corresponding file from original package. So say if `index.ftd` is missing in
Hindi translation, because it is not yet translated, FASTN will pick the
`index.ftd` from the English/original version and `hi.fastn.dev` will be a
"complete website".

Once a file has been created in translation package, it can be in other of three
states: a. file exists but has never been accepted, meaning translation has
started but not yet finished, b. file is upto date with the original, and c. file
was once up to date, but since then English version has changed.

In a and c we show a warning on the genrated pages so readers can see that either
the translation is not complete or out of date, and we give quick option to switch
to the English/original version. In case if things are out of date, we also show
since how long is it out of date and what is the diff in the Enlish version from
when Hindi version was last marked up to date, to current English version.

-- ft.h2: Translation Status

We also create a translation status page that shows a summary information for
all languages how many documents are upto date, missing etc.

-- ft.h2: Development

Checkout what is planned in [Roadmap](/roadmap/), and day to day updates in the
[Journal](/journal/).

Github: [github.com/FifthTry/fastn](https://github.com/FifthTry/fastn)
Discord: [#fastn on FifthTry](https://discord.gg/a7eBUeutWD)

--- ft.youtube:
id: rny1EGkqw_M

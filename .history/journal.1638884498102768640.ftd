


-- ft.page:


-- ft.h0: FASTN Journal


-- ft.h1: SQLite Support!

7th Dev 2021

Yesterday I [started implementing SQLite 
support](https://github.com/FifthTry/fastn/commit/3c2662a6797495c7ead4b7b3bb9c431616b1bf00) 
for FTD documents via `$processor$` mechanism of `ftd`. It was stuck on some 
missing helper utilities in FTD, you can see the two functions in the end with 
`todo!()` as their body. 

Today Arpita was feeling a bit better from cold, and [PR implementing those 
functions in ftd](https://github.com/FifthTry/ftd/pull/24). She can't not work
even when down it seems!

To be continued...


-- ft.h1: Started Design

6th Dec 2021

Jay has created a logo that we kind of like, and some initial design for our 
homepage:


-- ft.image:
src: https://i.imgur.com/axb1vKD.png

This is still under works.


-- ft.h1: Sqlite Support

Since we are anyways going to implement some sqlite support for [package 
database](/fastn/~/16/), we may as well let people include arbitrary sqlite files in 
the package, and let people do arbitrary SQL queries on top of any of the sqlite 
databases in the package or any package that is a dependency of this package.

[Change Request](/fastn/~/26/).

[Partially implemented `$processor$: 
package-query`](https://github.com/FifthTry/fastn/commit/3c2662a6797495c7ead4b7b3bb9c431616b1bf00).
Need two methods in `ftd` crate, waiting for Arpita to get better and implement
them.


-- ft.h1: Dynamic Documents and FASTN Action

Recently I implemented `$processor$: http`, which paves the way for almost fully
fledged ["dynamic"/data drive documents](///www.fifthtry.com/fastn/~/20/). To really
expose this feature, we can implement arbitrary URL handing, currently only the 
URLs corresponding to actual FTD files is available, this is too limiting as we can
not have author page for example, where we need a URL for each author, and author 
list maybe in a table, or spread all over ftd documents. 

With a `FASTN/URLs.ftd`, we can define URL patterns that can contain dynamic data, eg
`/<username>/` etc. We can map each URL pattern to a FTD file, and the file can 
extract the data by defining a schema (eg a record), where the fields of record 
would be populated by URL query parameters, URL fragments (eg `username`) here, or
even request body if its available.

We will sometime need redirect etc, eg if you need login to access something, or
if the page has moved etc. So we need a mechanism to early return, currently its
not possible in a FTD document to let a document say we are done processing the
page. At least we can have some standard variable, eg `fastn.redirect-url`, which 
when set, FASTN will ignore the document and return the content of `fastn.redirect-url`
instead, along with some instruction to `fastn.js` to update the URL displayed in
browser.

This is almost the design of [`realm`](///www.amitu.com/realm/). Once I wrote that
I realised we also need an equivalent of "realm actions", and turned out the design
is really easy. Wrote about it in another CR: [fastn 
actions](///www.fifthtry.com/fastn/~/24/). 

The key element of actions is now we need a `fastn.js`, which will have some 
behaviour, and this paves the way for [fastn client 
variables](///www.fifthtry.com/fastn/~/25/).


-- ft.h1: Client Variables

Some variables can only be computed by client. So we need to ship a `fastn.js`, which
will compute them, and pass them to FTD. Some of these variables would also change
during the lifetime of the page.

`fastn.js` will also do some browser history control, for managing server side 
"internal redirect", and `fastn actions`.


-- ft.h1: `fastn sync`, `fastn status` and `fastn diff`

5th Dec 2021

Arpita has been on fire, implemented these three commands. This makes `fastn` puts
some "version control" features in `fastn`. Our goal is not become simplified git,
we definitely take a lot of inspiration from them, but more like advance 
Dropbox/iCloud.

`fastn repo` is needed before we can really call ourselves version control or compare
ourselves with Dropbox/iCloud etc. But if you are using Dropbox/iCloud, you can
already benefit from these commands.

Our goal now is to implement [`adhoc tracking`](/fastn/~/12/), and get to 
[`translation tracking`](/fastn/~/3/).


-- ft.h1: `$processor$: toc` and `$processor$: http`

5th Dec 2021

We implemented [these two processors](/fastn/processors/). TOC processor helps you 
when you are trying to create navigation bars, or table of content of your FASTN 
site (this is not the intra page TOC, which we still do not know how to implement).

`$processor$: http` lets you fetch data from any HTTP endpoint that returns JSON 
when rendering a FTD document. It opens up massive opportunities, you can fetch 
data from all sorts of places, data driven graphs and tables etc can be created.


-- ft.h1: Font Support

4th Dec 2021

We just added font support. This allows people to use custom fonts with FTD/FASTN.

You can specify the fonts you want loaded in [`FASTN.ftd`](/fastn/FASTN/) file.


-- ft.h1: Package Dependency Fetching

3rd Dec 2021

Shobhit added support for adding package dependency, and fetching dependencies from
Github or any tar file. We store the dependencies in `.packages`.

Lots still pending, recursive package dependency, or any way to update a package,
looking for packages in FASTN_HOME, but its exciting to have this feature land so
soon.


-- ft.h1: Package Database

1st Dec 2021

Wrote about the design of [package database](/fastn/~/16/), basically a sqlite 
database that we will maintain in the initial phase of `fastn build`, and a way to
query that database to get data stored in different ftd documents that are part
of the FASTN package.

This can make fastn packages the ideal data sharing format. You can have data 
authored in FTD, and packaged as FASTN package, along with some UI code, and publish
them to `fastn repo`. And then other packages can have a dependency on the original 
data package, fastn will download the data, and they can do something more with it, 
create more visualisations, augment data even more using `$processors$` etc, and
maybe publish that package again for other to consume.


-- ft.h1: Update for 30th Nov 2021

Shobhit is working full time on FASTN now. We managed to nail down quite a bit of 
our design now.


-- ft.h2: `fastn build` working

Finally we can start using `fastn`. We have created a template repo: 
[FifthTry/fastn-blog](https://github.com/FifthTry/fastn-blog), [rendered 
version](https://fifthtry.github.io/fastn-blog/), which shows how to create a blog 
using FTD and FASTN.


-- ft.h2: Design Review With Arpita

Me and Arpita recorded a detailed design review of FASTN.


-- ft.youtube:
id: rny1EGkqw_M


-- ft.h1: Kickoff

25th Nov 2021

We have started working on this project now. We have written design docs for quite
a few elements:

- `fastn build`: [file system organization](/fastn/~/1/)
- [logical linking](/fastn/~/2/)
- [translation tracking](/fastn/~/3/)
- [version tracking](/fastn/~/5/)
- [history tracking](/fastn/~/4/)
- [cr tracking](/fastn/~/6/)
- [upstream tracking: two way sync](/fastn/~/7/)
- [`fastn-repo` authentication](/fastn/~/8/)
- [package dependencies](/fastn/~/9/)
- [access control](/fastn/~/10/)

[Shobhit](https://github.com/sharmashobit) is taking the lead of implementing this.
We are hoping to create a minimal version that can convert ftd files to HTML so
`fastn` can be considered an alternative to static site generators.
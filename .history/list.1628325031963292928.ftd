-- import: fifthtry/ft


-- ft.h0: `list`

`list` keyword can be used to create a list or an array in `ftd`.


-- ft.h1: Declaring a `list`


-- ft.code: a list of integer
lang: ftd

\-- list primes:
type: integer


-- ft.markdown:

Here we have declared a new variable called `primes`, which is a `list` of
`integer`s. When the list is created it is empty.


-- ft.h1: Adding values to list

The name of `list` can be used to insert more values in that list:


-- ft.code:
lang: ftd

\-- primes: 1
\-- primes: 3
\-- primes: 5
\-- primes: 7
\-- primes: 11


-- ft.markdown:

We have inserted 5 `integer`s to our `list` named `primes`.


-- ft.code:
lang: ftd

\-- record person:
name: caption
body: bio

\-- list people:
type: person

\-- people: Amit Upadhyay

Amit is CEO of FifthTry.

\-- people: Shobhit Sharma

Shobhit is a developer at FifthTry.


-- ft.markdown:

Here we have created a `list` of `person` objects, called it `people`, and 
created two `person` objects and inserted them the `people` list.


-- ft.h1: Reading A `list` from Rust

You can use the `.get()` method to read a `list`:


-- ft.code:
lang: rs

#[derive(serde::Deserialize)]
struct Person {
    name: String,
    bio: String,
}

let doc = ftd::p2::Document::from("some/id", source, lib)?;
let people: Vec<Person> = doc.get("people")?;


-- ft.markdown:

You can read more details of reading `ftd` files ["Reading FTD 
Files"](/fifthtry/ftd/reading-data/) guide.
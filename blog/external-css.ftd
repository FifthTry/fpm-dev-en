-- import: fastn-community.github.io/bling/chat
-- import: fastn.com/blog/authors
-- import: fastn-community.github.io/doc-site/common
-- import: fastn.com/utils
-- import: fastn.com/content-library as lib

-- common.post-meta index-meta: Using External CSS
published-on: November 3, 2023 at 10:27 am
post-url: /external-css/
author: $authors.rithik

In this blog, we will break down all the necessary details we
need to know before using external CSS properties on our fastn components.

- Creating an External CSS File
- Defining CSS classes
- Applying Classes to fastn Elements
- Crucial Takeaways

-- common.post-meta meta: Using External CSS
published-on: November 3, 2023 at 10:27 am
post-url: /external-css/
author: $authors.rithik

In this blog, we will break down all the necessary details we
need to know before using external CSS properties on our fastn components.

-- ds.blog-page:
meta: $meta

-- ds.h3: **When external CSS should be used?**

In cases, when we want to use any properties which are not yet supported
by fastn or maybe we wish to use certain experimental properties
which are recently released to test it out with fastn. In such cases,
the use of external CSS would be a viable choice.

-- ds.h3:  **When we should be avoid using it?**

Unless fastn supports the properties you need, using external CSS is not recommended
Since there is a downside that the styles that are applied on the elements
using external CSS wont support any native fastn events. So it is
not recommended to use external CSS if you have to involve event handling
on those styles.

-- ds.h1: Let's use external CSS

-- ds.h2: Sample data

We will need some CSS to use it as external CSS. For this, I'm using
this `my-style.css` that looks like this.

-- ds.code:
lang: css
download: my-style.css
copy: true

.my-class
{
    color: blue;
    font-size: 16px;
}

-- ds.h2: Simplified Procedure

We need to perform the following steps in order to use external CSS in fastn.

- Attaching the CSS file or use inline CSS in your fastn file
- Specifying the CSS classes on your elements in fastn

-- ds.h2: Attaching the CSS file (Step-1)

We can attach the CSS file in two ways:
- Either by using the [css](/common-attributes/#css) attribute (Recommended)
- Using CLI flags (`--external-css`/`--css`) when using fastn

-- ds.h3: Attaching CSS file using css attribute

This is pretty simple and is the recommended way of attaching any CSS file
with your fastn document. Let's say we have created a CSS file like this:

-- ds.code:
lang: css
download: my-style.css
copy: true

.my-class
{
    color: blue;
    font-size: 16px;
}

-- ds.markdown:

And we want to attach the above CSS file in our fastn document.
We just need to specify your CSS file path using [assets](/assets/) to the
[css](/common-attributes/#css) attribute through component
definition or invocation.

-- ds.code: Attaching CSS file on Component Definition
lang: ftd
download: index.ftd
copy: true

\-- import: <your-package-name>/assets

\-- component foo:
css: $assets.files.my-style.css ;; <hl>

\;; <DEFINITION OMITTED>

\-- end: foo

-- ds.code: Attaching CSS file on Component Invocation
lang: ftd
download: index.ftd
copy: true

\-- import: <your-package-name>/assets

\-- ftd.text: Hello World
css: $assets.files.my-style.css ;; <hl>

-- ds.markdown:

But hold on, wait a minute something ain't right. Here we have just attached
the CSS file and we haven't specified the CSS class we want to use on our
element. So there will be no change in style in the above case until we
specify the CSS class on our elements.

-- ds.h3: Attaching CSS file using CLI flags

There is an alternative way of attaching CSS file through the use of
certain CLI flags with fastn serve/build commands.

- `--external-css=<FILE-PATH>`: Using this flag, we can attach an CSS
file by providing its file path
- [Inline css flag](external-css#attaching-inline-css)

-- ds.h3: Attaching inline CSS

There is a CLI flag which can be used to include inline CSS from a CSS file
instead of attaching it using script tags.

- `--css=<FILE-PATH>`: Using this flag, we can include any CSS as inline
CSS from the CSS file specified.

-- ds.h1: Specifying CSS class on elements (Step-2)

Up until now, we have seen how simple it is to attach a CSS file
with our fastn documents. We will now specify the class on our elements
in order to use the CSS class styles from the external CSS file. In our case,
we will mention the class `my-class` (defined inside `my-style.css`) through the
[classes](/common-attributes/#classes) attribute during component
invocation. For example

-- ds.code:
lang: ftd
download: index.ftd
copy: true

\-- import: <your-package-name>/assets

\-- ftd.text: Hello World
css: $assets.files.my-style.css
classes: my-class ;; <hl>

-- ds.markdown:

In the above code, by adding `classes: my-class` attribute on your
element, you're instructing the browser to apply the
styling rules defined in the `my-class` class from the external
CSS file `my-style.css` to this text element.
And this is how we use external CSS in fastn.
The later sections include alternative ways to certain steps.

-- ds.h1: Useful Links

- To attach external CSS file - [css](/common-attributes/#css) attribute
- To add classes to fastn elements - [classes](/common-attributes/#classes) attribute
- To access CSS files in fastn - [assets](/assets/)

-- end: ds.blog-page

-- my-ds.page: Button using `fastn` ðŸš§

Video Title: How to create a button using `fastn`

Owner: Ajit

Audience: Frontend developer, designer

Goal: To help users to create button using `fastn`

Assumption: Have already installed `fastn` and create a fastn package.
Understanding of datatypes, components.


-- ds.h1: Part 1 - Create Button

In this part we will create simple UI for button.

-- ds.h2: Intro Clip

**Screen**: Introduction slide

-- ds.image:
src: $fastn-assets.files.planning.button.button-using-fastn.jpg

**Script**

Hey Guys, Welcome to the video where we are going to create a button using
`fastn`. 

First, we will learn how to create a button with basic UI then we will
recreate this button UI in later stages of this video.

To make the button we will use the concept of 
[components](https://fastn.com/components). The link is in the description box.

We will define various properties to the component. 

Also, we will do some event handling that gives the shadow to the button
on-hover.



-- ds.h2: **Basic UI**

Open button.ftd file



Script

Let's start by creating a `component` called `button`.
The syntax is:

-- ds.code:
lang: ftd

\-- component button:

\-- end: button

-- ds.markdown:

We will give the basic properties to this component like, `title` and `link`.
- `title` will be of `caption` type. 
- `link` is of `string` type.

You can also make the link as `optional`, if you do not want to add any link to
it.

-- ds.code:
lang: ftd


\-- component button:
caption title:
optional string link: 

\-- end: button


-- ds.markdown:

Let's start with one button.

Inside this component we will add `ftd.text` that will take the title and other
properties.

-- ds.code:
lang: ftd

\-- ftd.text: $button.title
link: $button.link
border-width.px: 2


-- ds.markdown:

We have a basic button ready.


**Show the UI**

-- ds.image:
src: $fastn-assets.files.planning.button.button-shadow.png

Let's start with the second part where we start putting things together to make
these two buttons. As you can see the two buttons are in a row so we will use
container component. There are various style properties applied with differnt
background color as well as the first button has a icon, so will will add that
too. Later on we will add shadow to the second button.

I also want you to understand the concept of inheritence and why we use it? How
we use it? Why it is the best practice to use concept of inheritence while
giving a role or color. So for that I will use a package called `doc-site`
which is a template built using fastn language. For the purpose to stick to the
concept we are learning, we will skip that part ie how to use another package
in your project. If you want to learn about it. You can checkout the Part 2
video of the Expander course I have created.

So let's put the buttons in a row.

-- ds.code:
lang: ftd

\-- ftd.row:


\-- ftd.text: $button.title
link: $button.link
border-width.px: 2

\-- end: ds.code


-- ds.markdown:

Now these properties are common to both buttons, so the best-practice is to
apply to the parent component therefore we will move it to the `ftd.row`.

-- ds.code:
lang: ftd

\-- ftd.row:
link: $button.link
border-width.px: 2
border-radius.px: 6
padding.px: 10

\-- ftd.text: $button.title

\-- end: ds.code


-- ds.markdown:

After that, add the styling properties as required. 

So, in the component definition we will add:

-- ds.code:
lang: ftd

\-- component button:
caption title:
optional string link: 
ftd.responsive-type role: $inherited.types.copy-regular ;; <hl>
ftd.color text-color: $inherited.colors.text-strong 	;; <hl>


\-- end: button

-- ds.markdown:

In the `ftd.text`, we will use these component properties.

-- ds.code:
lang: ftd

\-- ftd.text: $button.title
role: $button.role 			;; <hl>
color: $button.text-color 	;; <hl>
style: bold 				;; <hl>
margin-horizontal.px if { button.left-icon == NULL }: 32 ;; <hl>


-- ds.markdown: 

Let's keep improving it. We need background color and border color as well.

-- ds.code:
lang: ftd

\-- component button:
caption title:
optional string link:
ftd.responsive-type role: $inherited.types.copy-regular
ftd.color text-color: $inherited.colors.text-strong
optional ftd.color bg-color:				;; <hl>
optional ftd.color border-color:			;; <hl>

-- ds.markdown:

We want use these component properties in the row:

-- ds.code:
lang: ftd

\-- ftd.row:
link: $button.link
border-width.px: 2
border-radius.px: 6
padding.px: 10
background.solid: $button.bg-color				;; <hl>
border-color: $button.border-color 				;; <hl>


\-- ftd.text: $button.title
role: $button.role 		
color: $button.text-color 
style: bold 	


\-- end: ds.code



-- ds.markdown:

Since we are trying to copy the colors of this UI. I have created the custom
color records like:

-- ds.code:
lang: ftd


\-- ftd.color monochrome-dark:
light: black
dark: white


\-- ftd.color monochrome-light:
light: white
dark: black

\-- ftd.color shadow-color:
light: #cae9ee
dark: #E4B0AC


-- ds.markdown:

You might have seen that the first button has an icon to it. So we will add 
that as well. And since this icon is only used in first button, so we will add 
a condition to it as well.

-- ds.code:
lang: ftd

\-- component button:
caption title:
ftd.responsive-type role: $inherited.types.copy-regular
optional string link:
ftd.color text-color: $inherited.colors.text-strong
optional ftd.color bg-color:
optional ftd.color border-color:
optional ftd.image-src left-icon: 	;; <hl>


-- ds.code:
lang: ftd

\-- ftd.image:
if: { button.left-icon != NULL }
src: $button.left-icon
align-self: start
margin-right.px: 3
height.fixed.px: 24



-- ds.markdown:

Let's add the shadow to the second button. First we will create a record.

-- ds.code:
lang: ftd

\-- ftd.shadow s:
color: $shadow-color
x-offset.px: 0
y-offset.px: 0
blur.px: 50
spread.px: 7


-- ds.markdown:

We will add the component property:

-- ds.code:
lang: ftd

\-- component button:
caption title:
ftd.responsive-type role: $inherited.types.copy-regular
optional string link:
ftd.color text-color: $inherited.colors.text-strong
optional ftd.color bg-color:
optional ftd.color border-color:
optional ftd.image-src left-icon: 	
optional ftd.shadow hover-shadow: 	;; <hl>


-- ds.markdown:

And to the ftd.row we will add shadow

-- ds.code:
lang: ftd

shadow: $button.hover-shadow


-- ds.markdown:

Now we can create events which on-hover shows the shadow. So we will create a
boolean variable to component definition and create two events of
`on-mouse-enter` and `on-mouse-leave`.

-- ds.code:
lang: ftd

\$on-mouse-enter$: $ftd.set-bool($a = $button.is-hover, v = true)
\$on-mouse-leave$: $ftd.set-bool($a = $button.is-hover, v = false)

-- ds.markdown:

And to the shadow we will add if condition.

-- ds.code:
lang: ftd

shadow if { button.hover-shadow != NULL && button.is-hover }: $button.hover-shadow


-- ds.markdown:

The button component where it is called.


-- ds.code:
lang: ftd

\-- ftd.column:
background.solid: white
width: fill-container
align-content: center
height.fixed.px: 280

\-- ftd.row:
width: hug-content
align-self: center
spacing.fixed.px: 20


\-- button: Start Deploying
left-icon: $assets.files.images.uparrow.svg
border-color: black
bg-color: $monochrome-dark
text-color: $monochrome-light
link: https://fastn.io/



\-- button: Get a Demo
hover-shadow: $s
border-color: $shadow-color
text-color: $monochrome-dark
bg-color: $monochrome-light
link: https://fastn.io/expander

\-- end: ftd.row

\-- end: ftd.column



-- ds.h2: Closing remarks

There you go, we have polished the UI and it looks similar to our original UI. 
I hope you have learnt with me and found this video easy to follow. You 
can share your feedbacks if you wish to.

We would love to see your package. Checkout our "show-and-tell"
channel on Discord where you can share with us your own UIs and I can also
create a video to show who has created what.


-- end: my-ds.page

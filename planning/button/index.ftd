-- my-ds.page: Button using `fastn`

Video Title: How to create a button using `fastn`

Owner: Ajit

Audience: Frontend developer, designer

Goal: To help users to create button using `fastn`

Assumption: Have already installed `fastn` and create a fastn package.
Understanding of datatypes, components.


-- ds.h1: Part 1 - Create Button

In this part we will create simple UI for button.

-- ds.h2: Intro Clip

**Screen**: Introduction slide

-- ds.image:
src: $fastn-assets.files.planning.button.button-using-fastn.jpg

**Script**

Hey Guys, my name is Ajit and I am back with another video on `fastn`.
In this video we are going to create buttons using `fastn language`. 


We will start off by creating a button with basic UI then we will
recreate these buttons as you see on the screen in the later stages of this 
video.


This UI is just an inspiration we took from Vercel. We will make it look like
this using `fastn` but will do some of our own stuffs like giving it a shadow on
hover because in Vercel it is a continous shadow.


To make the button we will use the concepts like: 
- [`components`](https://fastn.com/components). 
- To the component we will apply various properties with their respective
  [`built-in types`](https://fastn.com/ftd/built-in-types/). 
  Some of the `Primitive Types` like `caption`, `string`, `boolean` while 
  others of the `Derived Types` like `ftd.color`, `ftd.shadow`.
- We will use [`records`](https://fastn.com/ftd/record/) as well to 
  define colors for both light and dark mode as well as shadow-color similar to 
  what we have in second button.
- We will do `event handling` that gives **shadow** to the button `on-hover`.


You can find all the URLs of the concepts which we will discuss in this video
in the description below. 



-- ds.h2: **Project build-up**

\;; Open button.ftd file

**Script:**


Let's start by creating a `component` and we will call it `button`.
The syntax is:

-- ds.code:
lang: ftd

\-- component button:

\-- end: button

-- ds.markdown:

We will give the basic properties to this component like, `title` and `link`.
- `title` is of `caption` type. 
- `link` is of `string` type.

You can also make the link as `optional`, if you do not want to add any link to
it.

-- ds.code:
lang: ftd

\-- component button:
caption title:
optional string link: 

\-- end: button


-- ds.markdown:

First, let's create one basic button.

Inside this component we will add `ftd.text` that will take the title, a link
and apply the border property to it.

-- ds.code:
lang: ftd

\-- ftd.text: $button.title
link: $button.link
border-width.px: 2


-- ds.markdown:

We have a basic button ready.


\;; Show the UI

-- ds.image:
src: $fastn-assets.files.planning.button.button-with-shadow.png

Let's start with the second part where we start putting things together to make
these two buttons. As you can see the two buttons are in a row so we will use
`ftd.row` container component. There are various style properties applied with
differnt background color as well as the first button has a icon, so will will
add that too. Later on we will add shadow to the second button.

I also want you to understand the concept of inheritence and why we use it? How
we use it? Why it is the best practice to use concept of inheritence while
giving a `role` or `color`. So for that I will use a package called `doc-site`
which is a template built using `fastn language`. For the purpose to stick to
the concept we are learning, we will skip that part i.e. how to use another
package in your project? If you want to learn about it, you can checkout the
the Expander course video. Link is shared in the description.



-- ds.markdown:

Given some styling properties to the row.

-- ds.code:
lang: ftd

\-- ftd.text: $button.title
link: $button.link
border-width.px: 2
border-radius.px: 6        ;; <hl>
padding.px: 10             ;; <hl>
min-width.fixed.px: 175    ;; <hl>
style: bold                ;; <hl>



-- ds.markdown:

After that, add the color and role to the text. 

For that, in the component definition we have added a `text-color`: 

-- ds.code:
lang: ftd

\-- component button:
caption title:
optional string link: 
ftd.color text-color: $inherited.colors.text-strong 	  ;; <hl>


\-- end: button

-- ds.markdown:

In the `ftd.text`, we will use these component properties.

-- ds.code:
lang: ftd

\-- ftd.text: $button.title
link: $button.link
border-width.px: 2
border-radius.px: 6        
padding.px: 10             
min-width.fixed.px: 175    
style: bold                           
role: $inherited.types.copy-regular		;; <hl>
color: $button.text-color 	          ;; <hl>



-- ds.markdown: 

Let's keep improving it. We need background color and border color as well.

-- ds.code:
lang: ftd

\-- component button:
caption title:
optional string link:
ftd.color text-color: $inherited.colors.text-strong
ftd.color bg-color: $inherited.colors.background.base				;; <hl>
ftd.color border-color: $inherited.colors.border-strong			;; <hl>
    



-- ds.markdown:

Since we are trying to copy the colors of this UI. I have created the custom
color variables like:

-- ds.code:
lang: ftd

\-- ftd.color monochrome-dark:
light: black
dark: white

\-- ftd.color monochrome-light:
light: white
dark: black

\-- ftd.color shadow-color:
light: #cae9ee
dark: #e4b0ac



-- ds.markdown:

Let's add the shadow to the button. First we will create a variable of 
type `ftd.shadow`, which is a record.

-- ds.code:
lang: ftd

\-- ftd.shadow s:
color: $shadow-color
x-offset.px: 0
y-offset.px: 0
blur.px: 50
spread.px: 7


-- ds.markdown:

Now we will add the component property of type `ftd.shadow` and make it 
optional

-- ds.code:
lang: ftd

\-- component button:
caption title:
optional string link:
ftd.color text-color: $inherited.colors.text-strong
ftd.color bg-color: $inherited.colors.background.base      
ftd.color border-color: $inherited.colors.border-strong     
optional ftd.shadow hover-shadow: 	                     ;; <hl>



-- ds.markdown:

And then will add shadow to the button

-- ds.code:
lang: ftd

\-- ftd.text: $button.title
link: $button.link
border-width.px: 2
border-radius.px: 6        
padding.px: 10             
min-width.fixed.px: 175    
style: bold                           
role: $inherited.types.copy-regular   
color: $button.text-color            
shadow: $button.hover-shadow           ;; <hl>


-- ds.markdown:

Now we can create events which on-hover shows the shadow. So we will create a
boolean variable to component definition and create two events of
`on-mouse-enter` and `on-mouse-leave`.


-- ds.code:
lang: ftd

\-- component button:
caption title:
optional string link:
ftd.color text-color: $inherited.colors.text-strong
ftd.color bg-color: $inherited.colors.background.base      
ftd.color border-color: $inherited.colors.border-strong     
optional ftd.shadow hover-shadow:      
boolean $is-hover: false 


-- ds.markdown:

And then in the button we will add the events.                

-- ds.code:
lang: ftd

\$on-mouse-enter$: $ftd.set-bool($a = $button.is-hover, v = true)
\$on-mouse-leave$: $ftd.set-bool($a = $button.is-hover, v = false)


-- ds.markdown:

And to the shadow we will add if condition.

-- ds.code:
lang: ftd

shadow if { button.is-hover }: $button.hover-shadow


-- ds.markdown:

The button component where it is called.


-- ds.code:
lang: ftd

\-- ftd.column:
background.solid: white
width: fill-container
align-content: center
height.fixed.px: 280


\-- button: Get a Demo
hover-shadow: $s
border-color: $shadow-color
text-color: $monochrome-dark
bg-color: $monochrome-light
link: https://fastn.io/expander


\-- end: ftd.column


-- ds.h2: Closing remarks

There you go, we have polished the UI and it looks similar to our original UI
with our own touch to it. I hope you have learnt with me and found this video
easy to follow. You can share your feedbacks if you wish to in comments or on
our official Discord server.

Also, we would love to see your package which you will create following this
video. You can share it on the dicord's "show-and-tell" channel. Thank you
guys.


-- end: my-ds.page
